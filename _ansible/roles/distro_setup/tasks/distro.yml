---
# tasks file to setup distro to my liking

- name: Install Power Management (Laptop)
  package:
    state: present
    name: "{{ power_management_packages }}"
  become: yes
  tags: powersave,become

- name: Enable Power Management (Laptop)
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes
  with_items:
    - "{{ power_management_service }}"
  tags: powersave,become

- name: Intel setup
  block:
    - name: Set i915 driver options
      lineinfile:
        path: /etc/modprobe.d/i915.conf
        create: yes
        line: 'options i915 disable_power_well=0 enable_dc=2 enable_psr=1 enable_rc6=7 enable_fbc=1 powersave=1 enable_guc=3'
        mode: 0600

    - name: Set Intel HDA driver options
      lineinfile:
        path: /etc/modprobe.d/snd_hda_intel.conf
        create: yes
        line: 'options snd_hda_intel power_save_controlle=Y power_save=1'
        mode: 0600

    - name: Set Intel ETH driver options
      lineinfile:
        path: /etc/modprobe.d/e1000e.conf
        create: yes
        line: 'options e1000e SmartPowerDownEnable=1'
        mode: 0600

    - name: Set Intel Wifi driver options
      lineinfile:
        path: /etc/modprobe.d/iwlwifi.conf
        create: yes
        line: 'options iwlwifi power_save=Y power_level=5 iwlmvm power_scheme=3'
        mode: 0600
  become: yes
  tags: distro,intel,become

- name: Disable WIFI Mac address randomization on scan
  blockinfile:
    path: /etc/NetworkManager/conf.d/30-mac-randomization.conf
    create: yes
    block: |
      [device-mac-randomization]
      wifi.scan-rand-mac-address=no
    mode: 0600
  become: yes
  tags: distro,wifi,become

- name: Set sysctl variables
  sysctl:
    name: '{{ item.name }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - {name: vm.laptop_mode, value: 5}
    - {name: kernel.nmi_watchdog, value: 0}
    - {name: vm.swappiness, value: 5}
    - {name: vm.oom_kill_allocating_task, value: 1}
    - {name: vm.vfs_cache_pressure, value: 100}
    - {name: vm.dirty_ratio, value: 90}
    - {name: vm.dirty_background_ratio, value: 50}
    - {name: vm.dirty_writeback_centisecs, value: 1500}
    - {name: vm.dirty_expire_centisecs, value: 60000}
    - {name: fs.inotify.max_user_watches, value: 524288}
    - {name: net.ipv4.ip_default_ttl, value: 66}
  become: yes
  tags: distro,sysctl,become

- name: Cpupower
  shell: "{{ pkg_mngr }} install -y {{ cpupower_pkg }}"
  register: pkg_output
  changed_when: pkg_output.stdout_lines|length > 5
  become: yes
  tags: distro,powersave,become

- name: Set UDev Rules
  blockinfile:
    path: /etc/udev/rules.d/powersave.rules
    create: yes
    block: |
      ACTION=="add", SUBSYSTEM=="pci", ATTR{power/control}="auto"
      ACTION=="add", SUBSYSTEM=="ahci", ATTR{power/control}="auto"
      ACTION=="add", SUBSYSTEM=="scsi_host", KERNEL=="host*", ATTR{link_power_management_policy}="min_power"
      ACTION=="add", SUBSYSTEM=="scsi", ATTR{power/control}="auto"
      ACTION=="add", SUBSYSTEM=="acpi", ATTR{power/control}="auto"
      ACTION=="add", SUBSYSTEM=="block", ATTR{power/control}="auto"
      ACTION=="add", SUBSYSTEM=="workqueue", ATTR{power/control}="auto"
      ACTION=="add", SUBSYSTEM=="i2c", ATTR{power/control}="auto"
      ACTION=="add", SUBSYSTEM=="net", KERNEL=="enp*", RUN+="/usr/sbin/ethtool -s %k wol d"
      ACTION=="add", SUBSYSTEM=="net", KERNEL=="wlp*", RUN+="/usr/sbin/ethtool -s %k wol d"
      ACTION=="add", SUBSYSTEM=="net", KERNEL=="wlp*", RUN+="/usr/sbin/iw dev %k set power_save on"
      ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/read_ahead_kb}="65536"
      ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="0", ATTR{queue/scheduler}="bfq"
      ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="0", ATTR{queue/iosched/low_latency}="1"
      ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1", ATTR{queue/scheduler}="bfq"
      ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1", ATTR{queue/iosched/low_latency}="1"
      ACTION=="add|change", KERNEL=="sd[a-z]", RUN+="/usr/sbin/hdparm -B 1 /dev/%k"
      SUBSYSTEM=="power_supply",ENV{POWER_SUPPLY_ONLINE}=="0",RUN+="/bin/cpupower frequency-set -g conservative -u 2000MHz"
      SUBSYSTEM=="power_supply",ENV{POWER_SUPPLY_ONLINE}=="1",RUN+="/bin/cpupower frequency-set -g performance -u 4500MHz"
    marker: "# {mark} ANSIBLE MANAGED BLOCK BY DOTFILES"
    mode: 0600
  become: yes
  tags: distro,powersave,become

- name: Check if lvm.conf is present
  stat:
    path: /etc/lvm/lvm.conf
  register: lvm_file
  tags: distro

- name: Deploy lvm.conf Flags
  replace:
    path: /etc/lvm/lvm.conf
    regexp: 'issue_discards = 0'
    replace: 'issue_discards = 1'
    backup: yes
  register: lvm_setup
  become: yes
  when: lvm_file.stat.exists
  tags: distro,storage,become

- name: Check if Crypttab is present
  stat:
    path: /etc/crypttab
  register: crypt_file
  tags: distro,storage

- name: Deploy Crypttab Performance Flags
  replace:
    path: /etc/crypttab
    regexp: 'none$'
    replace: 'none discard no-read-workqueue no-write-workqueue'
    backup: yes
  register: crypt_setup
  become: yes
  when: crypt_file.stat.exists
  tags: distro,storage,become

- name: Check if zram is present
  shell: swapon | grep zram
  register: zram_setup
  changed_when: no
  failed_when: no
  tags: distro,zram

- name: Setup zramswap
  block:
    - name: Set zram service
      blockinfile:
        path: /etc/systemd/system/zram.service
        create: yes
        block: |
          [Unit]
          Description=Swap with zram
          After=multi-user.target

          [Service]
          Type=oneshot
          RemainAfterExit=true
          ExecStartPre=/sbin/mkswap /dev/zram0
          ExecStart=/sbin/swapon /dev/zram0
          ExecStop=/sbin/swapoff /dev/zram0

          [Install]
          WantedBy=multi-user.target
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        mode: 0644
      register: zram_service

    - name: Setup zram
      shell: "{{ item }}"
      with_items:
        - echo zram > /etc/modules-load.d/zram.conf
        - echo 'options zram num_devices=1' > /etc/modprobe.d/zram.conf
        - echo 'KERNEL=="zram0", ATTR{disksize}="{{ (ansible_memtotal_mb/2)|int }}M",TAG+="systemd"' > /etc/udev/rules.d/99-zram.rules
        - udevadm control --reload-rules && udevadm trigger
        - modprobe zram num_devices=1
      when: zram_service.changed

    - name: Enable Zram
      systemd:
        name: zram
        state: started
        enabled: yes
        daemon_reload: yes
  become: yes
  tags: distro,zram,become
  when: zram_setup.rc != 0

- name: Check if Grub is present
  stat:
    path: /etc/default/grub
  register: grub_file
  tags: distro,grub

- name: Deploy Grub Flags
  replace:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ item.option | regex_escape }}=).)*)(?:[" ]{{ item.option | regex_escape }}=\S+)?(.*")$'
    replace: '\1 {{ item.option }}={{ item.value }}\2'
    backup: yes
  with_items:
    - {option: drm.debug, value: 0}
    - {option: drm.vblankoffdelay, value: 1}
    - {option: mmc_mod.use_blk_mq, value: 1}
    - {option: nmi_watchdog, value: 0}
    - {option: pcie_aspm, value: force}
    - {option: pcie_aspm.policy, value: powersupersave}
    - {option: scsi_mod.use_blk_mq, value: 1}
  register: grub_setup
  become: yes
  when: grub_file.stat.exists
  tags: distro,grub,become

- name: Set Grub Rules
  blockinfile:
    path: /etc/default/grub
    create: yes
    block: |
        GRUB_DISABLE_OS_PROBER="true"
        GRUB_DISABLE_RECOVERY="true"
        GRUB_DISABLE_SUBMENU="true"
        GRUB_GFXMODE=640x480
        GRUB_RECORDFAIL_TIMEOUT=0
        GRUB_TIMEOUT=0
        GRUB_TIMEOUT_QUIET="true"
        GRUB_TIMEOUT_STYLE=hidden
        superusers=""
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    mode: 0600
  register: grub_conf
  become: yes
  when: grub_file.stat.exists
  tags: distro,grub,become

- name: Update Grub and Initramfs /RedHat
  command: "{{ item }}"
  with_items:
    - "grub2-mkconfig -o /boot/grub2/grub.cfg"
    - "dracut --force --regenerate-all -v"
  when: >
    ((grub_setup is defined and grub_setup.changed) or
    (grub_conf is defined and grub_conf.changed) or
    (lvm_setup is defined and lvm_setup.changed) or
    (crypt_setup is defined and crypt_setup.changed))
    and ansible_os_family == "RedHat"
  become: yes
  tags: distro,grub,become

- name: Update Grub and Initramfs /Debian
  command: "{{ item }}"
  with_items:
    - "update-grub"
    - "update-initramfs -k all -u"
  when: >
    ((grub_setup is defined and grub_setup.changed) or
    (grub_conf is defined and grub_conf.changed) or
    (lvm_setup is defined and lvm_setup.changed) or
    (crypt_setup is defined and crypt_setup.changed))
    and ansible_os_family == "Debian"
  become: yes
  tags: distro,grub,become
