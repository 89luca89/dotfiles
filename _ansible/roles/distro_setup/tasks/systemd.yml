---

- name: Set systemd timeout
  blockinfile:
    path: "{{ item }}"
    create: yes
    block: |
      [Manager]
      DefaultTimeoutStopSec=10s
    marker: "# {mark} ANSIBLE MANAGED BLOCK BY DOTFILES"
    mode: 0600
  with_items:
    - /etc/systemd/system.conf.d/system.conf
    - /etc/systemd/system.conf.d/user.conf
  become: yes
  tags: distro,sysctl

# Mask systemd services to free up memory
- name: Mask user services
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
    masked: yes
    daemon_reload: yes
    scope: user
  with_items: "{{ systemd_user_mask_services }}"
  become: no
  retries: 3
  delay: 3
  register: result
  until: result is not failed
  tags: systemd

# Mask systemd services to free up memory
- name: Mask system services
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
    masked: yes
    daemon_reload: yes
  with_items: "{{ systemd_root_mask_services }}"
  become: yes
  retries: 3
  delay: 3
  register: result
  until: result is not failed
  tags: systemd

- name: Deploy user services
  copy:
    src: "systemd/user/{{ item }}"
    dest: "{{ ansible_env.HOME }}/.config/systemd/user/{{ item }}"
  with_items: "{{ systemd_user_services }}"
  become: yes
  tags: systemd

- name: Deploy system services
  copy:
    src: "systemd/system/{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
  with_items: "{{ systemd_system_services }}"
  become: yes
  tags: systemd

- name: Enable user services
  systemd:
    name: "{{ item }}"
    enabled: yes
    masked: no
    daemon_reload: yes
    scope: user
  with_items: "{{ systemd_user_services }}"
  become: no
  retries: 3
  delay: 3
  register: result
  until: result is not failed
  tags: systemd

- name: Enable system services
  systemd:
    name: "{{ item }}"
    enabled: yes
    masked: no
    daemon_reload: yes
  with_items: "{{ systemd_system_services }}"
  become: yes
  retries: 3
  delay: 3
  register: result
  until: result is not failed
  when: "'fstrim.service' not in item"
  tags: systemd
