# main.yml
---

# Mask systemd services to free up memory
- name: Mask user services
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
    masked: yes
    daemon_reload: yes
    scope: user
  with_items: "{{ systemd_user_mask_services }}"
  become: no
  retries: 3
  delay: 3
  register: result
  until: result is not failed
  tags: distro

# Mask systemd services to free up memory
- name: Mask system services
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
    masked: yes
    daemon_reload: yes
  with_items: "{{ systemd_root_mask_services }}"
  become: yes
  retries: 3
  delay: 3
  register: result
  until: result is not failed
  tags: distro,become

- name: Include distro setup
  include: distro.yml
  tags: distro,become

- name: Remove Programs (Flatpak Programs - system)
  command: "{{ item }}"
  changed_when: no
  become: yes
  failed_when: no
  with_items:
    - flatpak uninstall --all
    - flatpak remote-delete fedora
  tags: flatpak_packages

- name: Install Programs (Flatpak Programs - flathub)
  command: "flatpak remote-add --user --if-not-exists {{ item.key }} {{ item.value }}"
  changed_when: no
  become: no
  with_items:
    - {key: "flathub", value: "https://flathub.org/repo/flathub.flatpakrepo"}
    - {key: "flathub-beta", value: "https://flathub.org/beta-repo/flathub-beta.flatpakrepo"}
  tags: flatpak_packages

- name: Install Programs (Flatpak Programs )
  command: "flatpak --user install -y flathub {{ item }}"
  with_items: "{{ flatpak_packages }}"
  register: flatpak_out
  changed_when: not 'already installed' in flatpak_out.stderr
  become: no
  tags: flatpak_packages

- name: Env variables (Flatpak Programs)
  shell: |
    if flatpak override --user --show {{ item.key }} | grep -q {{ item.value }}; then
      echo ok
    else
      flatpak override --user --env={{ item.value }} {{ item.key }}
    fi
  with_items: "{{ flatpak_overrides }}"
  register: override_out
  changed_when: not 'ok' in override_out.stdout
  become: no
  tags: flatpak_packages
