---
# tasks file to setup distro to my liking

- name: Update the profiles file with personal variables
  lineinfile:
    path: /etc/profile
    regexp: "{{ item }}"
    line: "{{ item }}"
    state: present
    backup: true
  with_items: "{{ global_vars }}"
  become: true

- name: Setup TLP blacklist
  lineinfile:
    path: /etc/tlp.conf
    regexp: "{{ item }}"
    line: "{{ item }}"
    state: present
    backup: true
  with_items: "{{ tlp_blacklist }}"
  become: true

# Mask systemd services to free up memory
- name: Mask services /1
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
    masked: true
    daemon_reload: true
    scope: user
  with_items: "{{ systemd_user_mask_services }}"
  become: false
  retries: 3
  delay: 3
  register: result
  until: result is not failed

# Mask systemd services to free up memory
- name: Mask services /2
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
    masked: true
    daemon_reload: true
  with_items: "{{ systemd_root_mask_services }}"
  become: true
  retries: 3
  delay: 3
  register: result
  until: result is not failed

- name: Improve Intel Tearfree on xorg
  blockinfile:
    path: /etc/X11/xorg.conf.d/20-intel.conf
    create: yes
    block: |
      Section "Device"
        Identifier "intel"
        Driver "intel"
        Option "AccelMethod" "sna"
        Option "TearFree" "true"
        Option "DRI" "3"
      EndSection
  become: true

- name: Set UDev Rules
  blockinfile:
    path: /etc/udev/rules.d/powersave.rules
    create: yes
    block: |
      SUBSYSTEM=="power_supply",ENV{POWER_SUPPLY_ONLINE}=="0",RUN+="/bin/cpupower frequency-set -g ondemand -u 1500MHz"
      SUBSYSTEM=="power_supply",ENV{POWER_SUPPLY_ONLINE}=="1",RUN+="/bin/cpupower frequency-set -g performance -u 4500MHz"
    marker: "# {mark} ANSIBLE MANAGED BLOCK BY DOTFILES"
  become: yes

- name: Deploy Grub Flags
  replace:
    path: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ item.option | regex_escape }}=).)*)(?:[" ]{{ item.option | regex_escape }}=\S+)?(.*")$'
    replace: '\1 {{ item.option }}={{ item.value }}\2'
    backup: true
  with_items:
    - {option: drm.debug, value: 0}
    - {option: drm.vblankoffdelay, value: 1}
    - {option: mmc_mod.use_blk_mq, value: 1}
    - {option: nmi_watchdog, value: 0}
    - {option: pcie_aspm, value: force}
    - {option: pcie_aspm.policy, value: powersupersave}
    - {option: scsi_mod.use_blk_mq, value: 1}
  register: grub_setup
  become: true

- name: Update Grub and Initramfs
  command: "{{ item }}"
  with_items:
    - "grub2-mkconfig -o /boot/grub2/grub.cfg"
    - "dracut --force --regenerate-all -v"
  when: grub_setup.changed and ansible_os_family == "Redhat"
  become: true

- name: Update Grub and Initramfs
  command: "{{ item }}"
  with_items:
    - "update-grub"
  when: grub_setup.changed and ansible_os_family == "Debian"
  become: true
