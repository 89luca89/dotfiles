# my_apps.yml
---
- name: Remove bloat packages
  package:
    state: absent
    name: "{{ debloat_pkg }}"
  become: true

- name: Install Programs (Programming Packages)
  package:
    state: latest
    name: "{{ terminal_packages }}"
  become: true

- name: Install Programs (python)
  package:
    state: latest
    name: "{{ python_packages }}"
  become: true

- name: Install Programs (PIP Packages) - pip
  pip:
    state: latest
    executable: pip3
    extra_args: --user
    name: "{{ python_modules }}"
  become: false

- name: Install Programs (golang)
  package:
    state: latest
    name: "{{ golang_packages }}"
  become: true

- name: Instal additional packages
  dnf:
    name: "{{ item }}"
    state: present
    disable_gpg_check: true
  become: true
  with_items:
    - https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm
    - "@virtualization"
  when: ansible_facts['os_family'] == "RedHat"

- name: Install Programs (GUI Programs)
  package:
    state: latest
    name: "{{ my_packages }}"
  become: true

- name: Check that golang exists
  stat:
    path: "{{ ansible_env.HOME }}/.local/go/bin/gopls"
  register: golang

- name: Install Programs (Programming Packages) - golang
  command: "go get -u {{ item }}"
  with_items: "{{ golang_modules }}"
  environment:
    GOPATH: "{{ ansible_env.HOME }}/.local/go"
  when: not golang.stat.exists

- name: Install Programs (Programming Packages) - golangci-lint
  shell: |
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.27.0
  environment:
    GOPATH: "{{ ansible_env.HOME }}/.local/go"
  when: not golang.stat.exists

- name: Install Programs (Programming Packages) - gopls
  command: "go get golang.org/x/tools/gopls@latest"
  environment:
    GO111MODULE: "on"
    GOPATH: "{{ ansible_env.HOME }}/.local/go"
  when: not golang.stat.exists

- name: Check that terraform exists
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/terraform"
  register: terraform
- name: Install terraform
  get_url:
    url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
    dest: /tmp/terraform.zip
  when: not terraform.stat.exists
- name: Unarchive Terraform archive
  unarchive:
    src: /tmp/terraform.zip
    dest: "{{ ansible_env.HOME }}/.local/bin/"
    copy: no
  when: not terraform.stat.exists

- name: Check that terraform-ls exists
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/terraform-ls"
  register: terraform_ls
- name: Install terraform lsp
  get_url:
    url: "https://releases.hashicorp.com/terraform-ls/{{ terraform_ls_version }}/terraform-ls_{{ terraform_ls_version }}_linux_amd64.zip"
    dest: /tmp/terraform-ls.zip
  when: not terraform_ls.stat.exists
- name: Unarchive Terraform-ls archive
  unarchive:
    src: /tmp/terraform-ls.zip
    dest: "{{ ansible_env.HOME }}/.local/bin/"
    copy: no
  when: not terraform_ls.stat.exists

- name: Check that terraform-provider-libvirt exists
  stat:
    path: "{{ ansible_env.HOME }}/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/{{ terraform_provider_libvirt_version }}/linux_amd64"
  register: terraform_provider_libvirt
- name: Check if install folder is present
  file:
    path: "{{ ansible_env.HOME }}/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/{{ terraform_provider_libvirt_version }}/"
    state: directory
    recurse: true
  when: not terraform_provider_libvirt.stat.exists
- name: Install terraform-provider-libvirt
  get_url:
    url: "{{ terraform_provider_libvirt_url }}"
    dest: /tmp/terraform-provider-libvirt.tar.gz
  when: not terraform_provider_libvirt.stat.exists
- name: Unarchive terraform-provider-libvirt archive
  unarchive:
    src: /tmp/terraform-provider-libvirt.tar.gz
    dest: "{{ ansible_env.HOME }}/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/{{ terraform_provider_libvirt_version }}/"
    copy: no
  when: not terraform_provider_libvirt.stat.exists
- command: |
    mv {{ ansible_env.HOME }}/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/{{ terraform_provider_libvirt_version }}/terraform-provider-libvirt \
          {{ ansible_env.HOME }}/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/{{ terraform_provider_libvirt_version }}/linux_amd64
  when: not terraform_provider_libvirt.stat.exists
