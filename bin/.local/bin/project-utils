#!/bin/bash
# Using bash instead of posix sh, to use arrays
#
# lint-project: Central hub to lint, format and generate ctags for multiple languages.
# Support single file or entire project folders.
COMMAND=$1
LANGUAGE=$2
DIR=$3

DEPS="
	ansible-lint
	clang-format
	flake8
	gofmt
	goimports
	golangci-lint
	isort
	jq
	shellcheck
	shfmt
	yamllint
	yapf
	kind
	ginkgo
"

if [ "${COMMAND}" != "setup" ]; then
	for dep in ${DEPS}; do
		if ! command -v "${dep}" > /dev/null; then
			echo "missing ${dep}"
			exit 1
		fi
	done
fi

case "$COMMAND" in
	"setup")
		echo "Installing golangci-lint..."
		if [ ! -e /usr/local/bin/golangci-lint ]; then
			curl -sSfL "https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh" |
				sudo sh -s -- -b /usr/local/bin
		fi

		echo "Installing pythong modules..."
		sudo sh -c "PIPX_HOME=/usr/local/pipx/ PIPX_BIN_DIR=/usr/local/bin/ pipx install --include-deps 'python-language-server[all]'"
		sudo sh -c "PIPX_HOME=/usr/local/pipx/ PIPX_BIN_DIR=/usr/local/bin/ pipx install yt-dlp"

		echo "Installing kind..."
		if [ ! -e /usr/local/bin/kind ]; then
			sudo curl -Lo /usr/local/bin/kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
			sudo chmod +x /usr/local/bin/kind
		fi
		;;
		###############################################################################
	"format")
		case "$LANGUAGE" in
			"c")

				files=$(find "$DIR" -type f -name '*.c' -o -name '*.h')
				for f in $files; do
					clang-format -i -style=Chromium "$f"
				done
				;;

			"cpp")

				files=$(find "$DIR" -type f -name '*.cpp' -o -name '*.h')
				for f in $files; do
					clang-format -i -style=Chromium "$f"
				done
				;;

			"go")
				files=$(find "$DIR" -type f -name '*.go' -not -path "$DIR/vendor/*")
				for f in $files; do
					gofmt -w "$f"
					goimports -w "$f"
				done
				;;

			"python")
				yapf -p --style facebook -i -r "$DIR" 2> /dev/null
				isort --ac --float-to-top "$DIR" 2> /dev/null
				;;

			"sh")
				result=0
				for file in $(find . -type f -not -path "*.git*"); do
					if file "$file" | grep -qi shell; then
						shfmt -s -ci -sr -kp -w "${file}"
						result=$((result + $?))
					fi
				done
				;;

		esac
		;;

		##############################################################################
	"lint")
		case "$LANGUAGE" in
			"go")
				[ -d "$DIR" ] && DIR="$DIR/..."
				LINES=$(/usr/local/bin/golangci-lint run "$DIR" --color never --out-format tab 2> /dev/null | sed "s/  */ /g" | sort -u)

				IFS='
				'
				for line in $LINES; do
					is_formatted=$(echo "$line" | cut -d " " -f1 | cut -d ":" -f3)
					is_multiline=$(echo "$line" | cut -d ":" -f2 | grep -Eo "^[0-9]")
					if [ -z "$is_formatted" ]; then
						echo "$line" | awk '{$1=$1":0"; print}'
					elif [ -n "$is_multiline" ]; then
						echo "$line"
					fi
				done

				# Find possible optimizations
				go build -o /dev/null \
					-gcflags="-m=2 -d=ssa/check_bce/debug=1 -d=ssa/prove/debug=2" 2>&1
				;;
			"python")
				flake8 -j auto --max-line-length 80 "$DIR" 2> /dev/null
				;;
			"sh")
				if [ -d "$DIR" ]; then

					for file in $(find . -type f -name ".*" -prune -o -print | grep -v '.git'); do

						if file "$file" | grep -qi shell; then
							# file is a shell script, we can shellcheck
							shellcheck -f gcc -a -Sstyle "${file}"
						fi

					done
				else
					shellcheck -f gcc -a -Sstyle "$DIR"
				fi
				;;

			"yaml")
				yamllint # -d "{extends: default, rules: {line-length: disable, truthy: disable, key-duplicates: enable, comments: {min-spaces-from-content: 1}}}" --format parsable "$DIR"
				;;

			*"ansible"*)
				DIR=$(realpath --relative-to="$(pwd)" "$DIR")

				yamllint # -d "{extends: default, rules: {line-length: disable, truthy: disable, key-duplicates: enable, comments: {min-spaces-from-content: 1}}}" --format parsable "$DIR"
				ansible-lint -p --nocolor -x yaml 2> /dev/null
				if [ -d "$DIR" ]; then
					if [ -d "$DIR/tasks" ]; then
						LINES=$(ansible-later tasks 2>&1)
					else
						LINES=$(ansible-later roles 2>&1)
					fi
				else
					LINES=$(ansible-later "$DIR" 2>&1)
				fi

				for line in ${LINES}; do
					if [ "$(echo "${line}" | wc -c)" -lt 2 ]; then
						continue
					else
						if ! echo "$line" | grep -q ERROR; then
							if ! echo "$line" | grep -q WARN; then
								echo "$line" | cut -c5-
							fi
						fi
					fi
				done
				;;

		esac
		;;
esac
