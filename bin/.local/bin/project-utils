#!/usr/bin/env bash
# Using bash instead of posix sh, to use arrays
#
# lint-project: Central hub to lint, format and generate ctags for multiple languages.
# Support single file or entire project folders.
COMMAND=$1
LANGUAGE=$2
DIR=$3

DEPS="
	codespell
	clang-format
	flake8
	gofmt
	goimports
	gofumpt
	golangci-lint
	isort
	jq
	shellcheck
	shfmt
	yamllint
	yapf
	ginkgo
"

for dep in  ${DEPS}; do
	if ! command -v "${dep}" > /dev/null; then
		echo "missing ${dep}"
		exit 1
	fi
done

case "$COMMAND" in
	"format")
		case "$LANGUAGE" in
			"c")

				files=$(find "$DIR" -type f -name '*.c' -o -name '*.h')
				for f in $files; do
					clang-format -i -style=Chromium "$f"
				done
				;;

			"cpp")

				files=$(find "$DIR" -type f -name '*.cpp' -o -name '*.h')
				for f in $files; do
					clang-format -i -style=Chromium "$f"
				done
				;;

			"go")
				files=$(find "$DIR" -type f -name '*.go' -not -path "$DIR/vendor/*")
				for f in $files; do
					gofmt -w "$f"
					goimports -w "$f"
					gofumpt -w "$f"
				done
				;;

			"python")
				yapf -p --style facebook -i -r "$DIR" 2> /dev/null
				isort --ac --float-to-top "$DIR" 2> /dev/null
				;;

			"sh")
				result=0
				for file in $(find . -type f -not -path "*.git*"); do
					if file "$file" | grep -qi shell; then
						shfmt -s -ci -sr -kp -w "${file}"
						result=$((result + $?))
					fi
				done
				;;

		esac
		;;

		##############################################################################
	"lint")
		case "$LANGUAGE" in
			"go")
				[ -d "$DIR" ] && DIR="$DIR/..."
				LINES=$(golangci-lint run "$DIR" --color never --out-format tab 2> /dev/null | sed "s/  */ /g" | sort -u)

				IFS='
				'
				for line in $LINES; do
					is_formatted=$(echo "$line" | cut -d " " -f1 | cut -d ":" -f3)
					is_multiline=$(echo "$line" | cut -d ":" -f2 | grep -Eo "^[0-9]")
					if [ -z "$is_formatted" ]; then
						echo "$line" | awk '{$1=$1":0"; print}'
					elif [ -n "$is_multiline" ]; then
						echo "$line"
					fi
				done

				# # Find possible optimizations
				# go build -o /dev/null \
				# 	-gcflags="-m=2 -d=ssa/check_bce/debug=1 -d=ssa/prove/debug=2" 2>&1
				;;
			"python")
				flake8 -j auto --max-line-length 80 "$DIR" 2> /dev/null
				;;
			"sh")
				if [ -d "$DIR" ]; then

					for file in $(find . -type f -name ".*" -prune -o -print | grep -v '.git'); do

						if file "$file" | grep -qi shell; then
							# file is a shell script, we can shellcheck
							shellcheck -f gcc -a -Sstyle "${file}"
						fi

					done
				else
					shellcheck -f gcc -a -Sstyle "$DIR"
				fi
				;;

			"yaml")
				yamllint # -d "{extends: default, rules: {line-length: disable, truthy: disable, key-duplicates: enable, comments: {min-spaces-from-content: 1}}}" --format parsable "$DIR"
				;;

			"spell")
				codespell --skip .git,vendor,*.pdf,*.1,*.css,*.lock # -d "{extends: default, rules: {line-length: disable, truthy: disable, key-duplicates: enable, comments: {min-spaces-from-content: 1}}}" --format parsable "$DIR"
				;;

		esac
		;;
esac
