#!/bin/bash
# Using bash instead of posix sh, to use arrays
#
# lint-project: Central hub to lint, format and generate ctags for multiple languages.
# Support single file or entire project folders.
COMMAND=$1
LANGUAGE=$2
DIR=$3

DEPS="
	ansible-lint
	clang-format
	flake8
	gofmt
	goimports
	golangci-lint
	guru
	isort
	jq
	markdownlint
	shellcheck
	shfmt
	yamllint
	yapf
"

if [ "${COMMAND}" != "setup" ]; then
	for dep in ${DEPS}; do
		if ! command -v "${dep}" > /dev/null; then
			echo missing $dep
			exit 1
		fi
	done
fi

case "$COMMAND" in
	"setup")
		echo "Installing golang modules..."
		GOLANG_MODULES="
		  golang.org/x/tools/cmd/goimports@latest
		  golang.org/x/tools/cmd/guru@latest
		  golang.org/x/tools/gopls@latest
		  mvdan.cc/sh/v3/cmd/shfmt@latest
		"
		for gopkg in ${GOLANG_MODULES}; do
			echo " - $gopkg"
			sudo GOBIN=/usr/local/bin go install "${gopkg}"
		done

		echo "Installing golangci-lint..."
		curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |
			sudo sh -s -- -b /usr/local/bin/

		echo "Installing pythong modules..."
		sudo pip3 install -U setuptools==57.5.0
		sudo pip3 install -U setuptools \
			ansible-later ansible-lint \
			demjson psutil six \
			python-language-server[all]

		echo "Installing markdownlint..."
		sudo npm install -g markdownlint-cli

		vim +PlugInstall! +PlugClean! +qall
		;;
		###############################################################################
	"format")
		case "$LANGUAGE" in
			"c")

				files=$(find "$DIR" -type f -name '*.c' -o -name '*.h')
				for f in $files; do
					clang-format -i -style=Chromium "$f"
				done
				;;

			"cpp")

				files=$(find "$DIR" -type f -name '*.cpp' -o -name '*.h')
				for f in $files; do
					clang-format -i -style=Chromium "$f"
				done
				;;

			"go")
				files=$(find "$DIR" -type f -name '*.go' -not -path "./vendor/*")
				for f in $files; do
					gofmt -w "$f"
					goimports -w "$f"
				done
				;;

			"python")
				yapf -p --style facebook -i -r "$DIR" 2> /dev/null
				isort -ac -rc "$DIR" 2> /dev/null
				;;

			"sh")
				result=0
				for file in $(find . -type f -not -path "*.git*"); do
					if file "$file" | grep -qi shell; then
						shfmt -s -ci -sr -kp -w $file
						result=$((result + $?))
					fi
				done
				;;

		esac
		;;

		##############################################################################
	"lint")
		case "$LANGUAGE" in
			"go")
				golangci-lint "$DIR"
				;;
			"python")
				flake8 -j auto --max-line-length 80 "$DIR" 2> /dev/null
				;;
			"sh")
				if [ -d "$DIR" ]; then

					for file in $(find . -type f -name ".*" -prune -o -print | grep -v '.git'); do

						if file "$file" | grep -qi shell; then
							# file is a shell script, we can shellcheck
							shellcheck -f gcc -a -Sstyle $file
						fi

					done
				else
					shellcheck -f gcc -a -Sstyle "$DIR"
				fi
				;;

			"yaml")
				yamllint -d "{extends: default, rules: {line-length: disable, truthy: disable, key-duplicates: enable, comments: {min-spaces-from-content: 1}}}" --format parsable "$DIR"
				;;

			*"ansible"*)
				DIR=$(realpath --relative-to="$(pwd)" "$DIR")

				yamllint -d "{extends: default, rules: {line-length: disable, truthy: disable, key-duplicates: enable, comments: {min-spaces-from-content: 1}}}" --format parsable "$DIR"
				ansible-lint -p --nocolor -x yaml 2> /dev/null
				if [ -d "$DIR" ]; then
					if [ -d "$DIR/tasks" ]; then
						LINES=$(ansible-later tasks 2>&1)
					else
						LINES=$(ansible-later roles 2>&1)
					fi
				else
					LINES=$(ansible-later "$DIR" 2>&1)
				fi

				while IFS= read -r line; do
					if [ "$(echo "$line" | wc -c)" -lt 2 ]; then
						continue
					else
						if ! echo "$line" | grep -q ERROR; then
							if ! echo "$line" | grep -q WARN; then
								echo "$line" | cut -c5-
							fi
						fi
					fi
				done <<< "$LINES"
				;;

			"markdown")
				if [ -d "$DIR" ]; then
					markdownlint $(find . -name '*.md' | grep -vF './.git')
				else
					markdownlint "$DIR" 2>&1
				fi
				;;

		esac
		;;
esac
