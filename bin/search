#!/bin/sh
# search: fuzzy finder based on fzf that works with Apps Files Passwords and open Windows.

set -o errexit
set -o nounset

# Default pass password store directory
PASSWORD_STORE=".password-store"
BOOKMARK_FILE="$HOME/Syncthing/Browsers/bookmarks/index.html"

# Preload incoming queries
if [ $# -eq 0 ]; then
	QUERY="Search"
else
	QUERY=$1
fi

# FUZZER="$HOME/.local/bin/fzf/bin/fzf --color=bw --prompt=$QUERY --reverse --query '"
FUZZER="rofi -dmenu -i -theme Arc-Dark -p $QUERY"

if [ "$(uname)" = "Darwin" ]; then
	GREP="/usr/local/bin/ggrep"
	PASS="/usr/local/bin/pass"
	CLIP="pbcopy"
elif [ "$(uname)" = "Linux" ]; then
	GREP="/bin/grep"
	PASS="/bin/pass"
	CLIP="xclip -loops 0 -sel p -sel s -sel c"
else
	echo "Unsupported OS"
	exit 1
fi

handle_password() {
	RESP_PASS=$(
		cat <<EOF | $FUZZER
Password
Username
OTP
EOF
	)

	case "$RESP_PASS" in

	Username)

		PASSDATA=$($PASS "$RESULT")
		USRNAME="$(echo "$PASSDATA" | $GREP -Ei "login:|username:|user:" | head -1 | cut -d' ' -f2-)"
		printf '%s' "$USRNAME" | nohup $CLIP &
		;;

	Password)

		PASSDATA=$($PASS "$RESULT" | head -n1)
		printf '%s' "$PASSDATA" | nohup $CLIP &
		;;

	OTP)

		PASSDATA=$($PASS otp "$RESULT" | head -n1)
		printf '%s' "$PASSDATA" | nohup $CLIP &
		;;

	*)

		exit 1
		;;

	esac
}

prepare_data() {
	# Find all files using ripgrep
	# Exclude some of the unwanted folders
	if [ "$QUERY" = "Search" ] || echo "$QUERY" | $GREP -q Files; then
		cd ~ || exit
		find -L -- ~ 2>/dev/null |
			$GREP -Ev 'node_modules|\.git|flatpak|\.cache|\.local/lib|\.local/share' |
			sed 's/^/Files: /g'
	fi

	# Fetch password list
	if [ "$QUERY" = "Search" ] || echo "$QUERY" | $GREP -Eq "Password|Bookmarks"; then
		cd ~ || exit
		find $PASSWORD_STORE/ -type f -name "*.gpg" 2>/dev/null |
			$GREP -Ev 'node_modules|\.git|flatpak|\.cache|\.local/lib|\.local/share' |
			sed 's/^/Password: /g' |
			sed "s/$PASSWORD_STORE\///g" |
			sed "s/\.gpg//g"
	fi

	if [ "$QUERY" = "Search" ] || echo "$QUERY" | $GREP -Eq "Bookmarks|Password"; then
		cd ~ || exit
		for line in $(cat "$BOOKMARK_FILE"); do
			bookmark=$(echo "$line" | $GREP -oP 'HREF="\Khttp[^"]+' || :)
			if [ "$bookmark" != "" ]; then
				title=$($GREP "$bookmark" "$BOOKMARK_FILE" | $GREP -Eo '">.*</A>' | $GREP -oP '>\K[^<]+' | $GREP -v 'Recent Tags')
				echo "Bookmarks: $title | $bookmark "
			fi
		done
	fi
}

main() {
	# Present on fzf
	RESULT=$(prepare_data | $FUZZER)

	if echo "$RESULT" | $GREP -q "^Password"; then

		### Handle the password
		RESULT=$(echo "$RESULT" | cut -d":" -f2 | awk '{$1=$1};1')
		handle_password

	elif echo "$RESULT" | $GREP -q "^Bookmark"; then

		RESULT=$(echo "$RESULT" | cut -d"|" -f2 | awk '{$1=$1};1')
		setsid -f xdg-open "$RESULT" >/dev/null 2>&1 &

	elif echo "$RESULT" | $GREP -q "^Files"; then

		### Open the file using MIME recognition
		RESULT=$(echo "$RESULT" | cut -d":" -f2 | awk '{$1=$1};1')
		setsid -f xdg-open "$RESULT" >/dev/null 2>&1 &
	else

		### Open the file using MIME recognition
		setsid -f xdg-open "https://$RESULT" >/dev/null 2>&1 &
	fi
	sleep 0.3
}

main
