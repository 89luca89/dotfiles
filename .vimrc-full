filetype off                                        " required
call plug#begin('~/.vim/plugged')
" vim tmux navigator
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'junegunn/fzf.vim'                             " fuzzy find all the things
Plug 'junegunn/fzf', { 'dir': '~/.local/bin/fzf', 'do': './install --all' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'flazz/vim-colorschemes'
Plug 'mhinz/vim-signify'
"" Lang Packs
Plug 'sheerun/vim-polyglot', { 'do': './build' }    " Lang packs
"" ALE+LSP
Plug 'dense-analysis/ale'
Plug 'autozimu/languageclient-neovim', {
            \ 'branch': 'next',
            \ 'do': 'bash install.sh',
            \ }
" Deoplete
Plug 'shougo/deoplete.nvim'
Plug 'deoplete-plugins/deoplete-tag'
Plug 'wellle/tmux-complete.vim'
"
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
call plug#end()                                     " required
filetype plugin indent on                           " required
syntax on
autocmd VimResized * :wincmd =
autocmd InsertEnter * :ALEEnable
autocmd InsertEnter * :LanguageClientStart
autocmd InsertEnter * call deoplete#enable()
autocmd BufWritePre * %s/\s\+$//e
" autocmd Syntax * syntax match myFunction /\v[[:alpha:]_.]+\ze\./
autocmd Syntax,InsertEnter * syntax match myObject /\.[[:alpha:][:digit:]-_.]*/
highlight link myObject     Special
"
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_extensions = ['tabline']
" Git
let g:signify_sign_add    = '>'
let g:signify_sign_delete = '-'
let g:signify_sign_change = '>'
" Langs
let g:python_highlight_all=1
let g:ansible_yamlKeyName = 'yamlKey'
let g:ansible_attribute_highlight = 'ab'
" Deoplete
set completeopt-=preview
let g:deoplete#enable_at_startup = 0                " Start on insert mode
let g:python3_host_prog = "/usr/bin/python3"
let g:deoplete#enable_smart_case = 1
" ALE linter
let g:ale_enabled           = 0                     " Start on insert mode
let g:ale_sign_error        = '⤫'
let g:ale_sign_warning      = '▲'
let g:ale_set_highlights    = 1
let g:ale_set_quickfix      = 1
let g:ale_linters_explicit  = 1
let g:ale_linters = {
            \ 'asm': ['gcc'],
            \ 'c': ['gcc'],
            \ 'cpp': ['gcc'],
            \ 'python': ['flake8', 'pylint'],
            \ 'rust': ['cargo'],
            \ 'go': ['golint'],
            \ 'sh':['shellcheck', 'shell'],
            \ 'xml':['xmllint'],
            \ 'json':['jsonlint'],
            \ 'yaml':['yamllint'],
            \ 'ansible':['ansible-lint']
            \}
let g:LanguageClient_autoStart = 0
let g:LanguageClient_diagnosticsEnable = 0
let g:LanguageClient_serverCommands = {
            \ 'asm': ['clangd'],
            \ 'c': ['clangd'],
            \ 'cpp': ['clangd'],
            \ 'python': ['/usr/local/bin/pyls'],
            \ 'rust' : ['rls'],
            \ 'go' : ['go-langserver', '-gocodecompletion'],
            \ 'sh' : ['bash-language-server', 'start'],
            \ }
" FZF fuzzy
let $FZF_DEFAULT_COMMAND="rg --files --hidden"
let g:fzf_files_options = "--preview 'if file {1} | grep -Ei \"text|JSON\"; then cat {1} ; fi'"
let g:fzf_tags_command = 'ctags -R'
let g:fzf_action = {'alt-enter':'vsplit' }

"""     Shortcuts   "
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>
nnoremap <C-c> :bp<bar>bd #<CR>
" Leader Shortcuts
let mapleader = ' '
" leader y/p to use system clipboard
map <leader>y "+y
map <leader>p "+p
" Utility shortcuts with leader:
map <leader><Tab> :Buffers<CR>
map <leader>b :Files<CR>
map <leader>e :<C-u>vert copen<bar>:50wincmd><CR>
map <leader>f :Rg<CR>
map <leader>j :set ft=.jinja2<Left><Left><Left><Left><Left><Left><Left>
map <leader>A :bufdo ALELint<CR>:bp<CR>:bufdo e<CR>:so ~/.vimrc<CR>
map <leader>t :Tags<CR>
map <silent> <leader>g :call LanguageClient#textDocument_definition()<cr>
map <silent> <leader>h :call LanguageClient_textDocument_hover()<cr>
map <silent> <leader>i :call LanguageClient_textDocument_implementation()<cr>
map <silent> <leader>l :call LanguageClient#textDocument_formatting()<cr>
map <silent> <leader>m :call LanguageClient_contextMenu()<cr>
map <silent> <leader>r :call LanguageClient_textDocument_rename()<cr>
map <silent> <leader>rf :call LanguageClient#textDocument_references()<cr>
map <silent> <leader>td :call LanguageClient_textDocument_typeDefinition()<cr>
" Ctrl+L Format Code
" if not use the specific implementation
noremap <C-L> <Esc>:w<CR>:mkview<CR>gg=G<CR>:loadview<CR>
augroup autoformat_settings
    autocmd FileType c,cpp,java,typescript,javascript noremap <buffer> <C-L><Esc>:w<CR>:mkview<CR>:%!clang-format -style=Google %<CR>:loadview<CR>
    autocmd FileType sh noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!shfmt %<CR>:w<CR>:e<CR>:loadview<CR>
    autocmd FileType json noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!jsonlint -f %<CR>:e<CR>:loadview<CR>
    autocmd FileType python noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!yapf %<CR>:w<CR>:!isort %<CR><CR>:w<CR>:e<CR>:loadview<CR>
    autocmd FileType rust noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!rustfmt %<CR>:w<CR>:e<CR>:loadview<CR>
    autocmd FileType go noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!gofmt %<CR>:w<CR>:e<CR>:loadview<CR>
augroup END
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab> :bn<CR>
map <S-Tab> :bp<CR>
" vim-tmux-navigator shortcuts
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
inoremap <silent> <M-Left> <Esc>:TmuxNavigateLeft<cr>
inoremap <silent> <M-Down> <Esc>:TmuxNavigateDown<cr>
inoremap <silent> <M-Up> <Esc>:TmuxNavigateUp<cr>
inoremap <silent> <M-Right> <Esc>:TmuxNavigateRight<cr>
" " Resize split window horizontally and vertically
noremap <S-M-Up> :2winc+<cr>
noremap <S-M-Down> :2winc-<cr>
noremap <S-M-Left> :2winc<<cr>
noremap <S-M-Right> :2winc><cr>
" Miscellaneous
set updatetime=300
set title nocompatible nowritebackup nobackup                     " required
set mouse=a                                                       " it's always useful
set undofile undolevels=1000 undodir=$HOME/.vim/undo              " Undo file and directory
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set path+=** wildmenu                                             " Recursive path Tab autocomplete
set hidden                                                        " change buffer without saving
set backspace=indent,eol,start                                    " http://vi.stackexchange.com/a/2163
set splitright splitbelow                                         " Open new splits to the right and bottom
set autoindent smartindent copyindent                             " always set autoindenting on
set smarttab expandtab shiftwidth=4 tabstop=4 softtabstop=4       " Four spaces for tabs everywhere
set hlsearch incsearch ignorecase smartcase                       " Highlight search results, ignore case if search is all lowercase
set nowrap number nomodeline
set laststatus=2
let &colorcolumn=join(range(81,250),",")
" Theming
set background=dark
set termguicolors
colorscheme molokai
highlight ALEErrorSign      guifg=#FF0000
highlight ALEWarningSign    guifg=#FFFF00
highlight ALEWarning        guibg=#333300
highlight SignifySignAdd    guifg=#00ff00
highlight SignifySignDelete guifg=#ff0000
highlight SignifySignChange guifg=#ffff00
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme molokai
        highlight ALEErrorSign      guifg=#FF0000
        highlight ALEWarningSign    guifg=#FFFF00
        highlight ALEWarning        guibg=#333300
        highlight SignifySignAdd    guifg=#00ff00
        highlight SignifySignDelete guifg=#ff0000
        highlight SignifySignChange guifg=#ffff00
        :silent !gsettings set org.gnome.Terminal.Legacy.Settings theme-variant "dark"
    else
        set background=light
        colorscheme xcode
        highlight ALEWarning        guibg=#e4e4e4
        highlight ALEErrorSign      guibg=#555555 guifg=#FF0000
        highlight ALEWarningSign    guibg=#555555 guifg=#FFFF00
        highlight SignifySignAdd    guifg=#00ff00 guibg=#555555
        highlight SignifySignDelete guifg=#ff0000 guibg=#555555
        highlight SignifySignChange guifg=#ffff00 guibg=#555555
        :silent !gsettings set org.gnome.Terminal.Legacy.Settings theme-variant "light"
    endif
endfunction
