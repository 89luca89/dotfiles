" Miscellaneous
let g:python_host_prog  = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'
set updatetime=300
set colorcolumn=80
set title nocompatible nowritebackup nobackup                     " required
set mouse=a undofile undolevels=1000 undodir=$HOME/.vim/undo      " Undo file and directory
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set path+=** wildmenu                                             " Recursive path Tab autocomplete
set hidden backspace=indent,eol,start                             " http://vi.stackexchange.com/a/2163
set splitright splitbelow                                         " Open new splits to the right and bottom
set autoindent smartindent copyindent smarttab expandtab shiftwidth=4 tabstop=4 softtabstop=4
set hlsearch incsearch ignorecase smartcase                       " Highlight search results, ignore case if search is all lowercase
set nowrap number nomodeline ttyfast lazyredraw
set completeopt=noinsert,noselect,menu,popup
set completepopup=align:menu,border:off,highlight:Pmenu
filetype off
call plug#begin('~/.vim/plugged')
" utilities
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.local/bin/fzf', 'do': './install --all' }
Plug 'ap/vim-buftabline'
Plug 'scrooloose/nerdtree'
" Git
Plug 'mhinz/vim-signify'
" Lang Packs
Plug 'sheerun/vim-polyglot', { 'do': './build' }
" Aestetics
Plug 'acarapetis/vim-colors-github'
Plug 'tomasr/molokai'
" vim-lsp + asyncomplete
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
call plug#end()
filetype plugin indent on
syntax on
" tabline
let g:buftabline_indicators = 1
let g:buftabline_separators = 1
let g:buftabline_plug_max   = 0
" Git
let g:signify_sign_add               = '>'
let g:signify_sign_delete            = '<'
let g:signify_sign_change            = '~'
" Langs
let g:ansible_attribute_highlight       = 'ab'
let g:ansible_extra_keywords_highlight  = 1
let g:ansible_name_highlight            = 'd'
let g:ansible_normal_keywords_highlight = 'Define'
let g:ansible_yamlKeyName               = 'yamlKey'
let g:go_highlight_array_whitespace_error   = 1
let g:go_highlight_build_constraints        = 1
let g:go_highlight_chan_whitespace_error    = 1
let g:go_highlight_extra_types      = 1
let g:go_highlight_fields           = 1
let g:go_highlight_function_calls   = 1
let g:go_highlight_function_parameters  = 1
let g:go_highlight_functions            = 1
let g:go_highlight_generate_tags        = 1
let g:go_highlight_operators            = 1
let g:go_highlight_space_tab_error      = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_types                    = 1
let g:go_highlight_variable_assignments     = 1
let g:go_highlight_variable_declarations    = 1
let g:java_highlight_all    = 1
let g:python_highlight_all  = 1
let g:python_highlight_builtin_funcs        = 1
let g:python_highlight_builtin_funcs_kwarg  = 1
let g:python_highlight_builtin_objs = 1
let g:python_highlight_builtins     = 1
let g:python_highlight_builtin_types    = 1
let g:python_highlight_class_vars   = 1
let g:python_highlight_doctests     = 1
let g:python_highlight_exceptions   = 1
let g:python_highlight_file_headers_as_comments = 1
let g:python_highlight_func_calls       = 1
let g:python_highlight_indent_errors    = 1
let g:python_highlight_operators        = 1
let g:python_highlight_space_errors     = 1
let g:python_highlight_string_format    = 1
let g:python_highlight_string_formatting= 1
let g:python_highlight_string_templates = 1
" FZF fuzzy
let g:fzf_action = {'alt-enter':'vsplit' }
let g:fzf_files_options = "--preview 'if file {1} | grep -Ei \"text|JSON\"; then cat {1} ; fi'"
"""     Shortcuts   "
" do last action on a selection
vnoremap . :'<,'>:normal .<CR>
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab>   :<C-u>bn!<CR>
map <S-Tab> :<C-u>bp!<CR>
" C-c close buffer
nnoremap <C-c> :<C-u>bp<BAR>sp<BAR>bn<BAR>bd<CR>
" Leader map
let mapleader = ' '
" leader y/p to use system clipboard, C-c in vmode for xclip
map <leader>y "+y
map <leader>p "+p
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>
" Nerdtree setup
noremap <leader>n   :NERDTreeToggle<CR>
noremap <leader>\   :NERDTreeFind<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Down>  :<C-u>2winc-<CR>
noremap <S-M-Left>  :<C-u>2winc<<CR>
noremap <S-M-Right> :<C-u>2winc><CR>
noremap <S-M-Up>    :<C-u>2winc+<CR>
" Utility shortcuts with leader:
nnoremap <leader><Tab>  :<C-u>Buffers<CR>
nnoremap <leader>b      :<C-u>Files<CR>
nnoremap <leader>f      :<C-u>Rg<CR>
nnoremap <leader>t      :<C-u>Tags<CR>
" Utility for Markdown and Ansible
nnoremap <leader>j  :<C-u>set ft=
" Theming
set noshowmode noshowcmd laststatus=0 ruler   " hide statusline
set rulerformat=%20(%m%r%w\ %y\ %l/%c%)\        " Modified+FileType+Ruler
set fillchars+=vert:â”‚
set guioptions=d
set background=dark
set termguicolors
augroup customsyntax
    autocmd! customsyntax
    autocmd Syntax,InsertEnter * syntax match myFunction /\<\k\+\ze(/
    autocmd Syntax,InsertEnter * syntax match myDeclaration_1 /\<\k\+\ze\s*=[a-zA-Z0-9 $:.\/\\]/
    autocmd Syntax,InsertEnter * syntax match myDeclaration_2 /\<.*\k\+\ze\s*:=[a-zA-Z0-9 $:.\/\\]/
    " Remove trailing whitespaces and lines
    autocmd BufWritePre * silent! :call StripTrailingWhiteSpace()
    " Refresh tags on save
    autocmd BufWritePost * silent! :call GenTags()
augroup end
highlight link myFunction       Function
highlight link myDeclaration_1  Special
highlight link myDeclaration_2  Special
colorscheme molokai
highlight Normal        guibg=#1E1E1E
highlight ColorColumn   guibg=#252525
highlight SpecialKey    guifg=#505050
highlight TabLine       guibg=#2E1E1E guifg=#D3D7CF
highlight TabLineFill   guibg=#1E1E1E guifg=#D3D7CF gui=NONE cterm=NONE term=NONE
highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
" FUNCTIONS --------------------------------------------------------------------
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme molokai
        highlight ColorColumn   guibg=#252525
        highlight Normal        guibg=#1E1E1E
        highlight SpecialKey    guifg=#505050
        highlight TabLine       guibg=#1E1E1E guifg=#D3D7CF
        highlight TabLineFill   guibg=#1E1E1E guifg=#D3D7CF gui=NONE cterm=NONE term=NONE
        highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
    else
        set background=light
        colorscheme github
        highlight ColorColumn   guibg=#F5F5F5
        highlight Normal        guibg=#FFFFFF
        highlight Pmenu         guifg=#000000 guibg=#EEEEEE
        highlight SpecialKey    guibg=#FFFFFF guifg=#9a9a9a
        highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
    endif
endfunction
" Generate tags
function! GenTags()
    if isdirectory(".git") || filereadable(".project")
        silent exec "!rm -f ./tags; ctags -R ."
        redraw!
    endif
endfun
" Remove Trailing Spaces and empty lines
function! StripTrailingWhiteSpace()
    " don't strip on these filetypes
    if &ft =~ 'markdown'
        return
    endif
    %s/\s\+$//e
    %s/\($\n\s*\)\+\%$//e
    redraw!
endfun
" LSP SETUP --------------------------------------------------------------------
" Default IDE-Style keybindings EDMRL, errors, definition, references, rename, indent
nnoremap <leader>e  :<C-u>lopen<CR>
nnoremap <leader>d  :<C-u>vert stag <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>m  :<C-u>Rg <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>r  :<C-u>!grep -rl <c-r>=expand("<cword>")<CR><BAR>xargs sed -i 's/<c-r>=expand("<cword>")<CR>//g'<Left><Left><Left>
nnoremap <leader>l  :<C-u>mkview<CR>ggVG=:<C-u>loadview<CR>
" Lsp keybindings overriding the previous
augroup lspbindings
    autocmd! lspbindings
    " IDE-like keybindings
    autocmd Filetype c,cpp,objc,objcpp,python,go,yaml,yaml.ansible,sh nnoremap <buffer> K  :<C-u>call popup_clear()<BAR>LspHover<CR>
    " Default IDE-Style keybindings EDMRL, errors, definition, references, rename, indent
    autocmd Filetype c,cpp,objc,objcpp,python,go,yaml,yaml.ansible,sh nnoremap <buffer> <leader>e :<C-u>LspDocumentDiagnostics<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>d :<C-u>LspDefinition<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>m :<C-u>LspCodeAction<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>r :<C-u>LspRename<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>l :<C-u>LspDocumentFormat<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>h :<C-u>call popup_clear()<BAR>LspPeekDefinition<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>td :<C-u>call popup_clear()<BAR>LspPeekTypeDefinition<CR>
augroup end
" Asyncomplete + LSP
let g:asyncomplete_auto_completeopt  = 0
let g:asyncomplete_smart_completion  = 1
let g:lsp_auto_enable                = 1
let g:lsp_diagnostics_echo_cursor    = 1
let g:lsp_diagnostics_enabled        = 1
let g:lsp_highlights_enabled         = 1
let g:lsp_highlight_references_enabled = 1
let g:lsp_log_file  = expand('/dev/null')
let g:lsp_semantic_enabled     = 1
let g:lsp_signs_enabled        = 1
let g:lsp_virtual_text_enabled = 1
"
augroup asyncompleteregister
    autocmd! asyncompleteregister
    " Lang specific keybindings
    autocmd VimEnter * call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
                \ 'name': 'buffer',
                \ 'whitelist': ['*'],
                \ 'completor': function('asyncomplete#sources#buffer#completor'),
                \ }))
    autocmd VimEnter * call lsp#register_server({
                \ 'name': 'efm-langserver',
                \ 'whitelist': [ 'yaml', 'yaml.ansible', 'sh', 'python', 'go' ],
                \ 'cmd': {server_info->['/home/luca-linux/.local/go/bin/efm-langserver',
                \       '-c=/home/luca-linux/dotfiles/efm-config.yml',
                \       '-logfile=/tmp/lsp.log', '-loglevel=5']},
                \ })
    autocmd VimEnter * call lsp#register_server({
                \ 'name': 'clangd',
                \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                \ 'cmd': {server_info->['clangd', '-background-index']},
                \ })
    autocmd VimEnter * call lsp#register_server({
                \ 'name': 'pyls',
                \ 'whitelist': ['python'],
                \ 'cmd': {server_info->['pyls']},
                \ })
    autocmd VimEnter * call lsp#register_server({
                \ 'name': 'gopls',
                \ 'whitelist': ['go'],
                \ 'cmd': {server_info->['/home/luca-linux/.local/go/bin/gopls']},
                \ 'workspace_config': {
                \  'gopls' : {
                \       'hoverKind': "FullDocumentation",
                \       'usePlaceholders': v:true,
                \       'fuzzyMatching': v:true,
                \       'staticcheck': v:true,
                \       'deepCompletion': v:true,
                \       'completionDocumentation': v:true,
                \       'completeUnimported': v:true,
                \       'analyses': {
                \            'fillreturns': v:true,
                \           'undeclarename': v:true,
                \           'unusedparams': v:true,
                \           'nonewvars': v:true,
                \          }
                \     }
                \ },
                \ })
augroup end
