" Miscellaneous
let g:python_host_prog  = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'
set autoindent backspace=indent,eol,start
set colorcolumn=80
set expandtab shiftwidth=4 tabstop=4 softtabstop=4                " Four spaces for tabs everywhere
set mouse=a                                                       " it's always useful
set nowrap number nomodeline cursorline
set path+=**                                                      " Recursive path Tab autocomplete
set smartindent copyindent                                        " always set autoindenting on
set smarttab smartcase ignorecase incsearch
set splitright splitbelow                                         " Open new splits to the right and bottom
set title nowritebackup nobackup noswapfile
set undofile undolevels=1000
set updatetime=1000
set undodir=$HOME/.vim/undo
set directory=$HOME/.vim/swap
set nocompatible
filetype off
call plug#begin('~/.vim/plugged')
" vim tmux navigator
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'junegunn/fzf', { 'dir': '~/.local/bin/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'yggdroot/indentLine'
Plug 'ap/vim-buftabline'
" Git
Plug 'tpope/vim-fugitive'
"" Lang Packs
Plug 'sheerun/vim-polyglot', { 'do': './build' }
" vim-lpsp + asyncomplete
Plug 'dense-analysis/ale'
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --all' }
" Aestetics
Plug '89luca89/vim-code-dark'
Plug 'acarapetis/vim-colors-github'
call plug#end()
"
filetype plugin indent on
syntax on
" Set cursorline ONLY on active buffer
set completeopt=noinsert,noselect,menu,popup
set completepopup=align:menu,border:off,highlight:Pmenu
let g:ycm_always_populate_location_list = 1
let g:ycm_goto_buffer_command = 'vertical-split'
augroup CursorLine
    au!
    " Dynamic split resize
    au VimResized * :wincmd =
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

let g:ale_enabled           = 1                     " Start on insert mode
let g:ale_set_loclist       = 1
let g:ale_linters_explicit  = 1
let g:ale_fix_on_save       = 1
let g:ale_yaml_yamllint_options     = '-d relaxed'
let g:ale_fixers = {
            \ 'sh':['shfmt'],
            \ }
let g:ale_linters = {
            \ 'sh':['shellcheck'],
            \ 'yaml':['yamllint'],
            \ 'ansible':['ansible-lint'],
            \}
" tabline
let g:buftabline_indicators = 1
let g:buftabline_separators = 1
let g:buftabline_plug_max   = 0
" indentline
let g:indentLine_char = '|'
let g:indentLine_concealcursor = ''
let g:indentLine_setConceal = 1
let g:intendLine_faser = 1
set list lcs=tab:\|\  " here is a space
" Netrw
let g:netrw_banner          = 0
let g:netrw_browse_split    = 4
let g:netrw_liststyle       = 3
let g:netrw_winsize         = -28
" Langs
let g:ansible_attribute_highlight   = 'ab'
let g:ansible_extra_keywords_highlight  = 1
let g:ansible_name_highlight = 'd'
let g:ansible_normal_keywords_highlight = 'Define'
let g:ansible_yamlKeyName   = 'yamlKey'
let g:go_highlight_build_constraints    = 1
let g:go_highlight_extra_types  = 1
let g:go_highlight_fields       = 1
let g:go_highlight_functions    = 1
let g:go_highlight_methods      = 1
let g:go_highlight_operators    = 1
let g:go_highlight_structs      = 1
let g:go_highlight_types        = 1
let g:python_highlight_all  = 1
"
" FZF fuzzy
let g:fzf_action = {'alt-enter':'vsplit' }
let g:fzf_files_options = "--preview 'if file {1} | grep -Ei \"text|JSON\"; then cat {1} ; fi'"
"""     Shortcuts   "
" Leader map
let mapleader = ' '
" toggle file explorer
nnoremap <C-n> :Lexplore<CR>
" leader y/p to use system clipboard, C-c in vmode for xclip
map <leader>y "+y
map <leader>p "+p
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>
vnoremap . :'<,'>:normal .<CR>
" vim-tmux-navigator shortcuts
let g:tmux_navigator_no_mappings    = 1
inoremap <silent> <M-Down>  <Esc>:<C-u>TmuxNavigateDown<CR>
inoremap <silent> <M-Left>  <Esc>:<C-u>TmuxNavigateLeft<CR>
inoremap <silent> <M-Right> <Esc>:<C-u>TmuxNavigateRight<CR>
inoremap <silent> <M-Up>    <Esc>:<C-u>TmuxNavigateUp<CR>
nnoremap <silent> <M-Down>  :<C-u>TmuxNavigateDown<CR>
nnoremap <silent> <M-Left>  :<C-u>TmuxNavigateLeft<CR>
nnoremap <silent> <M-Right> :<C-u>TmuxNavigateRight<CR>
nnoremap <silent> <M-Up>    :<C-u>TmuxNavigateUp<CR>
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab>   :<C-u>bn!<CR>
map <S-Tab> :<C-u>bp!<CR>
" C-c close buffer
nnoremap <C-c> :<C-u>bp<BAR>sp<BAR>bn<BAR>bd<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Down>  :<C-u>2winc-<CR>
noremap <S-M-Left>  :<C-u>2winc<<CR>
noremap <S-M-Right> :<C-u>2winc><CR>
noremap <S-M-Up>    :<C-u>2winc+<CR>
" Utility shortcuts with leader:
nnoremap <leader><Tab>  :<C-u>Buffers<CR>
nnoremap <leader>b      :<C-u>Files<CR>
nnoremap <leader>f      :<C-u>Rg<CR>
" Utility for Markdown and Ansible
nnoremap <leader>j  :<C-u>set ft=
" Default IDE-Style keybindings
nnoremap <leader>gd :<C-u>GitGutterPreviewHunk<CR>
nnoremap <leader>gs :<C-u>GFiles?<CR>
nnoremap <leader>gg :<C-u>GitGutterLineHighlightsToggle<CR>
nnoremap <leader>m  :<C-u>Commands<CR>
nnoremap <leader>t  :<C-u>Tags<CR>
nnoremap <leader>x  :<C-u>Rg <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>D  <C-T>
nnoremap <leader>d  :<C-u>vert stag <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>r  :<C-u>!grep -rl <c-r>=expand("<cword>")<CR><BAR>xargs sed -i 's/<c-r>=expand("<cword>")<CR>//g'<Left><Left><Left>
nnoremap <leader>l  :<C-u>mkview<CR>ggVG=:<C-u>loadview<CR>
nnoremap <leader>e  :<C-u>lopen<CR>
" YCM keybindings overriding the previous
augroup ycmbindings
    autocmd! ycmbindings
    " Lang specific keybindings
    autocmd Filetype sh nnoremap <buffer> <leader>l :<C-u>mkview<CR>:%!shfmt -f <CR><CR>:loadview<CR>
    " IDE-like keybindings
    autocmd Filetype c,cpp,python,go nnoremap <buffer> K  :<C-u>YcmCompleter GetDoc<CR>
    autocmd Filetype c,cpp,python,go nnoremap <buffer> <leader>d :<C-u>YcmCompleter GoTo<CR>
    autocmd Filetype c,cpp,python,go nnoremap <buffer> <leader>m  :<C-u>YcmCompleter GoToReferences<CR>
    autocmd Filetype c,cpp,python,go nnoremap <leader>l  :<C-u>YcmCompleter FixIt<CR>:<C-u>YcmCompleter Format<CR>
    autocmd Filetype c,cpp,python,go nnoremap <leader>r  :<C-u>YcmCompleter RefactorRename<CR>
augroup end
" Theming
set noshowmode noruler noshowcmd laststatus=0 ruler               " hide statusline
set rulerformat=%20(%m%r%w\ %y\ %l/%c%)\                          " Modified+FileType+Ruler
set fillchars+=vert:â”‚
set guioptions=d
set background=dark
set termguicolors
augroup customsyntax
    autocmd! customsyntax
    autocmd Syntax,InsertEnter * syntax match myFunction /\<\k\+\ze(/
    autocmd Syntax,InsertEnter * syntax match myDeclaration_1 /\<\k\+\ze\s*=[a-zA-Z0-9 $:.\/\\]/
    autocmd Syntax,InsertEnter * syntax match myDeclaration_2 /\<.*\k\+\ze\s*:=[a-zA-Z0-9 $:.\/\\]/
    " Remove trailing whitespaces and lines
    autocmd BufWritePre * silent! :call StripTrailingWhiteSpace()
    autocmd BufWritePost * silent! :call GenTags()
augroup end
highlight link myFunction   Function
highlight link myDeclaration_1   Identifier
highlight link myDeclaration_2   Identifier
colorscheme codedark
highlight TabLine       guibg=#1E1E1E guifg=#D3D7CF
highlight TabLineFill   guibg=#1E1E1E guifg=#D3D7CF
highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
highlight SpecialKey    guifg=#505050
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme codedark
        highlight TabLine       guibg=#1E1E1E guifg=#D3D7CF
        highlight TabLineFill   guibg=#1E1E1E guifg=#D3D7CF
        highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
        highlight SpecialKey    guifg=#505050
    else
        set background=light
        colorscheme github
        highlight ColorColumn   guibg=#F5F5F5
        highlight Normal        guibg=#FFFFFF
        highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
        highlight Pmenu         guifg=#000000 guibg=#EEEEEE
        highlight SpecialKey    guibg=#FFFFFF guifg=#9a9a9a
    endif
endfunction
" Remove Trailing Spaces and empty lines
function! StripTrailingWhiteSpace()
    " don't strip on these filetypes
    if &ft =~ 'markdown'
        return
    endif
    %s/\s\+$//e
    %s/\($\n\s*\)\+\%$//e
    redraw!
endfun
" Generate tags
function! GenTags()
    if isdirectory(".git") || filereadable(".project")
        silent exec "!rm -f ./tags; ctags -R ."
        redraw!
    endif
endfun
