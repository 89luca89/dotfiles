filetype off                  " required
call plug#begin('~/.vim/plugged')
" vim tmux navigator
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'scrooloose/nerdtree'                                      " split file manager
Plug 'vim-airline/vim-airline'                                  " tabs and statusline
Plug 'airblade/vim-gitgutter'                                   " +,-,~ on modified lines in git repo
Plug 'junegunn/fzf', { 'dir':'~/.local/bin/fzf', 'do':'./install --all' }
Plug 'junegunn/fzf.vim'
" LSP + Completion
Plug 'Shougo/deoplete.nvim'
Plug 'autozimu/languageclient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" ALE For langs not supported by LSP
Plug 'w0rp/ale'
" Lang Packs
Plug 'sheerun/vim-polyglot'
" nvim compatibility
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
" color schemes
Plug 'tomasiser/vim-code-dark'
Plug 'endel/vim-github-colorscheme'
call plug#end()               " required
filetype plugin indent on     " required

""" Airline -> bufferline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
" Ctrl+T fuzzy find ctags
" Ctrl+B fuzzy find files
" Ctrl+F grep -r in the folder
" Ctrl+H command history
noremap <C-T> :Tags<CR>
noremap <C-B> :Files<CR>
noremap <C-F> :Rg<CR>
noremap <C-H> :History:<CR>
let $FZF_DEFAULT_COMMAND="find . -type f -not -path '*/\.git/*'"
let g:fzf_files_options = "--preview 'pygmentize -g {1}'"
let g:fzf_tags_command = 'ctags -R'
let g:fzf_action = {'alt-enter':'vsplit' }
" ALE Linters (for non-lsp langs)
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_sign_column_always = 1
let g:ale_linters_explicit = 1
let g:ale_linters = {
            \ 'sh':['shellcheck', 'checkbashisms'],
            \ 'json':['jsonlint'],
            \ 'xml':['xmllint'],
            \ 'yaml':['yamllint'],
            \ 'ansible':['ansible-lint', 'yamllint'],
            \ 'Dockerfile':['dockerfile_lint']
            \}
" Async Complete + LSP
let g:deoplete#enable_at_startup = 1
set completeopt+=preview
set omnifunc=LanguageClient#complete
let g:LanguageClient_autoStart = 1
let g:LanguageClient_diagnosticsEnable = 1
let g:LanguageClient_diagnosticsList="Quickfix"
let g:LanguageClient_serverCommands = {
            \ 'c': ['clangd'],
            \ 'cpp': ['clangd'],
            \ 'python': ['pyls'],
            \ 'java': ['~/bin/lsp-java' ],
            \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
            \ 'go' : ['~/.local/go/bin/go-langserver'],
            \ }
" Language client shortcuts with leader:
map <silent> <leader>m :call LanguageClient_contextMenu()<cr>
map <silent> <leader>r :call LanguageClient_textDocument_rename()<cr>
map <silent> <leader>] :call LanguageClient#textDocument_definition()<cr>
map <silent> <leader>[ :call LanguageClient_textDocument_implementation()<cr>
map <silent> <leader>p :call LanguageClient#textDocument_references()<cr>
map <silent> <leader>l :call LanguageClient#textDocument_formatting()<cr>
" Ctrl+P loclist
map <silent> <C-P> :<C-u>vert copen<bar>:50wincmd><CR>
" Ctrl+L Format Code
" if not use the specific implementation
noremap <C-L> <Esc>:w<CR>:mkview<CR>ggVG=<CR>:loadview<CR>
augroup autoformat_settings
    autocmd FileType python noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!autopep8 %<CR>:loadview<CR>
    autocmd FileType c,cpp,objc,proto,typescript,javascript,java noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!clang-format -style=file %<CR>:loadview<CR>
    autocmd FileType css,json noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!jsonlint -f %<CR>:loadview<CR>
    autocmd FileType sh noremap <buffer> <C-L> <Esc>:w<CR>:!beautysh -f %<CR>:e<CR>
    autocmd FileType yaml,ansible noremap <buffer> <C-L> <Esc>:w<CR>:!yamlfmt -w %<CR><CR>
augroup END
" Ctrl+N relocate file explorer to opened file
let NERDTreeShowHidden=1
noremap <C-\> :NERDTreeToggle<CR>
noremap <C-N> :NERDTreeFind<CR>
" leader y/p to use system clipboard
noremap <Leader>y "+y
noremap <Leader>p "+p
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme codedark
    else
        set background=light
        colorscheme github
    endif
endfunction
""" Tabs Navigation
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab> :bn<CR>
map <S-Tab> :bp<CR>
" Ctrl+C close buffer ( pipe commands to fix behaviour with splits and netrw/nerdtree)
nnoremap <C-c> :bp<bar>sp<bar>bn<bar>bd!<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Up> :2winc+<cr>
noremap <S-M-Down> :2winc-<cr>
noremap <S-M-Left> :2winc><cr>
noremap <S-M-Right> :2winc<<cr>
" vim-tmux-navigator shortcuts 
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
inoremap <silent> <M-Left> <Esc>:TmuxNavigateLeft<cr>
inoremap <silent> <M-Down> <Esc>:TmuxNavigateDown<cr>
inoremap <silent> <M-Up> <Esc>:TmuxNavigateUp<cr>
inoremap <silent> <M-Right> <Esc>:TmuxNavigateRight<cr>
" Remap Wq to wq to have less typo on exit
cmap Wq wq
set nocompatible                                        " required
set mouse=a                                             " it's always useful
set undofile undolevels=1000 undodir=$HOME/.vim/undo    " Undo file and directory
set directory=$HOME/.vim/swap                           " Custom swapfile directory
set path+=** wildmenu                                   " Recursive path Tab autocomplete
set wildmenu
set lazyredraw ttyfast ttimeoutlen=20                   " Faster redraw
set hidden                                              " change buffer without saving
set backspace=indent,eol,start                          " http://vi.stackexchange.com/a/2163
set splitright splitbelow                               " Open new splits to the right and bottom
set autoindent smartindent                              " always set autoindenting on
set expandtab shiftwidth=4 tabstop=4 softtabstop=4      " Four spaces for tabs everywhere
set hlsearch incsearch ignorecase smartcase             " Highlight search results, ignore case if search is all lowercase
set nowrap                                              " play nicely with long lines
set number                                              " Enable line numbers
set nomodeline                                          " protect against https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set signcolumn=yes
let &colorcolumn=join(range(81,999),",")
syntax on
" play nicely with modern graphics
set encoding=utf8
set background=dark
set termguicolors
colorscheme codedark
