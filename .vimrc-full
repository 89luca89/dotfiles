filetype off                  " required
call plug#begin('~/.vim/plugged')
" vim tmux navigator
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf'                                             " fuzzy find all the things
Plug 'junegunn/fzf.vim'                                         " fuzzy find all the things

" Snippets
Plug 'sheerun/vim-polyglot'                                     " Lang packs
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'phenomenes/ansible-snippets'

" LSP
Plug 'w0rp/ale'
Plug 'shougo/deoplete.nvim'
Plug 'shougo/neco-syntax'
Plug 'deoplete-plugins/deoplete-clang'                          " C/C++//Obj-C/Obj-C++
Plug 'deoplete-plugins/deoplete-jedi'                           " Python
Plug 'wellle/tmux-complete.vim'                                 " Complete from text on other splits

" Compatibility
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

"Theme
Plug 'tomasiser/vim-code-dark'
Plug 'endel/vim-github-colorscheme'

call plug#end()                                                 " required
filetype plugin indent on                                       " required

autocmd VimResized * :wincmd =
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Langs
let g:python_highlight_all=1
let g:ansible_yamlKeyName = 'yamlKey'
let g:ansible_attribute_highlight = 'ab'
let g:ansible_name_highlight = 'd'
let g:ansible_extra_keywords_highlight = 1
let g:ansible_normal_keywords_highlight = 'Define'
let g:ansible_with_keywords_highlight = 'Operator'

" ALE linter
let g:ale_enabled = 1
let g:ale_set_quickfix = 1
let g:ale_linters_explicit = 1
let g:ale_set_highlights = 0
let g:ale_fix_on_save = 1
let g:ale_fixers = {'*':['remove_trailing_lines', 'trim_whitespace'], 'python':['isort', 'autopep8']}
let g:ale_linters = {
            \ 'asm': ['gcc'],
            \ 'c': ['gcc'],
            \ 'cpp': ['gcc'],
            \ 'sh':['shellcheck', 'shell'],
            \ 'python': ['python','pylint'],
            \ 'xml':['xmllint'],
            \ 'json':['jsonlint'],
            \ 'yaml':['yamllint'],
            \ 'ansible':['ansible-lint']
            \}

" Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#auto_completion_start_length = 2
let g:deoplete#manual_completion_start_length = 1

" I Like snippets!
let g:UltiSnipsListSnippets="<c-h>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

let $FZF_DEFAULT_COMMAND="rg --files --hidden"
let g:fzf_files_options = "--preview 'if file {1} | grep -i text; then highlight {1} --force -s molokai -O truecolor ; fi'"
let g:fzf_tags_command = 'ctags -R'
let g:fzf_action = {'alt-enter':'vsplit' }

" Nerdtree setup
noremap <C-B> :NERDTreeToggle<CR>
noremap <C-N> :NERDTreeFind<CR>

" Ctrl+C close buffer ( pipe commands to fix behaviour with splits and netrw/nerdtree)
map <C-c> :bp<bar>sp<bar>bn<bar>bd!<CR>
""" Ctrl-C copy visual selection to clipboard
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>

let mapleader = ' '
" leader y/p to use system clipboard
map <leader>y "+y
map <leader>p "+p
" Utility shortcuts with leader:
map <leader>/ :nohlsearch<CR>
map <leader>gf :vert wincmd f<CR>
map <leader>t :Tags<CR>
map <leader>b :Files<CR>
map <leader>f :Rg<CR>
map <leader><Tab> :Buffers<CR>
map <leader>j :set ft=.jinja2<Left><Left><Left><Left><Left><Left><Left>

" Ctrl+L Format Code
" if not use the specific implementation
noremap <C-L> <Esc>:w<CR>:mkview<CR>gg=G<CR>:loadview<CR>
augroup autoformat_settings
    autocmd FileType c,cpp,java,typescript,javascript noremap <buffer> <C-L><Esc>:w<CR>:mkview<CR>:%!clang-format -style=Google %<CR>:loadview<CR>
    autocmd FileType sh noremap <buffer> <C-L> <Esc>:w<CR>:!beautysh -f %<CR>:e<CR>
    autocmd FileType json noremap <buffer> <C-L> <Esc>:w<CR>:%!jsonlint -f %<CR>:e<CR>
    autocmd FileType python noremap <buffer> <C-L> <Esc>:w<CR>:%!autopep8 %<CR>
augroup END

" navigate tabs Tab (fw) S-Tab (prev)
map <Tab> :bn<CR>
map <S-Tab> :bp<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Up> :2winc+<cr>
noremap <S-M-Down> :2winc-<cr>
noremap <S-M-Left> :2winc><cr>
noremap <S-M-Right> :2winc<<cr>

" vim-tmux-navigator shortcuts
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
inoremap <silent> <M-Left> <Esc>:TmuxNavigateLeft<cr>
inoremap <silent> <M-Down> <Esc>:TmuxNavigateDown<cr>
inoremap <silent> <M-Up> <Esc>:TmuxNavigateUp<cr>
inoremap <silent> <M-Right> <Esc>:TmuxNavigateRight<cr>

set title nocompatible nowritebackup nobackup                    " required
set mouse=a                                                       " it's always useful
set undofile undolevels=1000 undodir=$HOME/.vim/undo              " Undo file and directory
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set path+=** wildmenu                                             " Recursive path Tab autocomplete
set lazyredraw ttyfast ttimeoutlen=20                             " Faster redraw
set hidden                                                        " change buffer without saving
set backspace=indent,eol,start                                    " http://vi.stackexchange.com/a/2163
set splitright splitbelow                                         " Open new splits to the right and bottom
set autoindent smartindent copyindent                             " always set autoindenting on
set smarttab expandtab shiftwidth=4 tabstop=4 softtabstop=4       " Four spaces for tabs everywhere
set hlsearch incsearch ignorecase smartcase                       " Highlight search results, ignore case if search is all lowercase
set nowrap number                                                 " play nicely with long lines
set nomodeline                                                    " protect against https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set signcolumn=yes laststatus=2
let &colorcolumn=join(range(81,999),",")
syntax on
" play nicely with modern graphics
set encoding=utf8
set background=dark
set termguicolors
colorscheme codedark

" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
colorscheme codedark
    else
        set background=light
        colorscheme github
    endif
endfunction
