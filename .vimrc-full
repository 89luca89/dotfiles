filetype off                                        " required
call plug#begin('~/.vim/plugged')
" vim tmux navigator
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'mhinz/vim-signify'
Plug 'junegunn/fzf.vim'                             " fuzzy find all the things
Plug 'junegunn/fzf', { 'dir': '~/.local/bin/fzf', 'do': './install --all' }
Plug 'vim-airline/vim-airline'
Plug 'yggdroot/indentLine'
"" Lang Packs
Plug 'sheerun/vim-polyglot', { 'do': './build' }    " Lang packs
"" ALE+LSP
Plug 'dense-analysis/ale'
Plug 'autozimu/languageclient-neovim', {
            \ 'branch': 'next',
            \ 'do': 'bash install.sh',
            \ }
" Deoplete
Plug 'shougo/deoplete.nvim'
" Snippets + Extras
Plug 'shougo/neosnippet'
Plug 'shougo/neosnippet-snippets'
Plug 'honza/vim-snippets'
" Dependencies
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
" Colorscheme
Plug 'rakr/vim-one'

call plug#end()                                     " required
"
filetype plugin indent on                           " required
syntax on
autocmd VimResized * :wincmd =
autocmd InsertEnter * call deoplete#enable()
autocmd InsertEnter * :ALEEnable
autocmd BufWritePre * %s/\s\+$//e
"
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_extensions = ['tabline']
let g:airline_theme = 'dark'
" indentline
let g:indentLine_setConceal = 1
let g:indentLine_concealcursor = ''
let g:intendLine_faser = 1
let g:indentLine_char = '┆'
:set list lcs=tab:\|\  " here is a space
" Git
let g:signify_sign_add    = '>'
let g:signify_sign_delete = '-'
let g:signify_sign_change = '>'
" Langs
let g:python_highlight_all  = 1
let g:ansible_yamlKeyName   = 'yamlKey'
let g:ansible_attribute_highlight   = 'ab'
let g:go_highlight_build_constraints    = 1
let g:go_highlight_extra_types  = 1
let g:go_highlight_fields       = 1
let g:go_highlight_functions    = 1
let g:go_highlight_methods      = 1
let g:go_highlight_operators    = 1
let g:go_highlight_structs      = 1
let g:go_highlight_types        = 1

" Deoplete
set completeopt=menu,longest,popup
set completepopup=align:menu,border:off,highlight:Pmenu
let g:deoplete#enable_at_startup = 0                " Start on insert mode
let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" ALE linter
let g:ale_enabled           = 0                     " Start on insert mode
let g:ale_sign_error        = '⤫'
let g:ale_sign_warning      = '▲'
let g:ale_set_highlights    = 1
let g:ale_set_quickfix      = 1
let g:ale_linters_explicit  = 1
let g:ale_fix_on_save       = 1
let g:ale_go_golangci_lint_package  = 1
let g:ale_go_golangci_lint_options  = '--enable-all -D funlen,gomnd,gochecknoglobals'
let g:ale_yaml_yamllint_options     = '-d relaxed'
let g:ale_fixers = {
            \ '*':['remove_trailing_lines', 'trim_whitespace'],
            \ 'sh':['shfmt'],
            \ 'xml':['xmllint'],
            \ 'c': ['clang-format'],
            \ 'cpp': ['clang-format'],
            \ 'python':['isort', 'autopep8', 'yapf'],
            \ 'go':['goimports', 'gofmt'],
            \ }
let g:ale_linters = {
            \ 'sh':['shellcheck', 'shell'],
            \ 'xml':['xmllint'],
            \ 'json':['jsonlint'],
            \ 'yaml':['yamllint'],
            \ 'ansible':['ansible-lint'],
            \ 'c': ['gcc'],
            \ 'cpp': ['gcc'],
            \ 'python': ['flake8', 'pylint'],
            \ 'go' : ['golangci-lint']
            \}
" LSP Language Client
let g:LanguageClient_autoStart  = 1
let g:LanguageClient_completionPreferTextEdit   = 1
let g:LanguageClient_hoverPreview       = "Always"
let g:LanguageClient_diagnosticsEnable  = 1
let g:LanguageClient_diagnosticsList    = "Quickfix"
let g:LanguageClient_serverCommands     = {
            \ 'c': ['clangd'],
            \ 'cpp': ['clangd'],
            \ 'python': ['pyls'],
            \ 'go' : ['gopls'],
            \ }

" FZF fuzzy
let g:fzf_files_options = "--preview 'if file {1} | grep -Ei \"text|JSON\"; then cat {1} ; fi'"
let g:fzf_tags_command = 'ctags -R'
let g:fzf_action = {'alt-enter':'vsplit' }

"""     Shortcuts   "
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>
" leader y/p to use system clipboard
map <leader>y "+y
map <leader>p "+p
" Leader Shortcuts
let mapleader = ' '
" Utility shortcuts with leader:
map <leader><Tab> :Buffers<CR>
map <leader>b :Files<CR>
map <leader>e :<C-u>vert copen<bar>:50wincmd><CR>
map <leader>f :Rg<CR>
map <leader>t :Tags<CR>
map <leader>j :set ft=.jinja2<Left><Left><Left><Left><Left><Left><Left>
nnoremap <leader>A  :bufdo ALELint<CR>:bp<CR>:bufdo e<CR>:so ~/.vimrc<CR>
nnoremap <leader>om :!~/bin/serve_pdf.sh "%" &<CR><CR>
" LSP
nnoremap <leader>d  :call LanguageClient#textDocument_definition({'gotoCmd': 'split'})<CR>
nnoremap <leader>r  :call LanguageClient#textDocument_rename()<CR>
nnoremap <leader>l  :call LanguageClient#textDocument_formatting()<CR>
nnoremap <leader>td :call LanguageClient#textDocument_typeDefinition()<CR>
nnoremap <leader>x  :call LanguageClient#textDocument_references()<CR>
nnoremap <leader>a  :call LanguageClient_workspace_applyEdit()<CR>
nnoremap <leader>c  :call LanguageClient#textDocument_completion()<CR>
nnoremap <leader>h  :call LanguageClient#textDocument_hover()<CR>
nnoremap <leader>s  :call LanguageClient_textDocument_documentSymbol()<CR>
nnoremap <leader>m  :call LanguageClient_contextMenu()<CR>
" Normal format code
noremap <C-L> <Esc>:w<CR>:mkview<CR>gg=G<CR>:loadview<CR>
" vim-tmux-navigator shortcuts
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
inoremap <silent> <M-Left> <Esc>:TmuxNavigateLeft<cr>
inoremap <silent> <M-Down> <Esc>:TmuxNavigateDown<cr>
inoremap <silent> <M-Up> <Esc>:TmuxNavigateUp<cr>
inoremap <silent> <M-Right> <Esc>:TmuxNavigateRight<cr>
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab>   :bn<CR>
map <S-Tab> :bp<CR>
" C-c close buffer
nnoremap <C-c> :bp<bar>bd #<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Up>    :2winc+<cr>
noremap <S-M-Down>  :2winc-<cr>
noremap <S-M-Left>  :2winc<<cr>
noremap <S-M-Right> :2winc><cr>

" Miscellaneous
set updatetime=300
set cursorline relativenumber
set title nocompatible nowritebackup nobackup                     " required
set mouse=a                                                       " it's always useful
set undofile undolevels=1000 undodir=$HOME/.vim/undo              " Undo file and directory
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set path+=** wildmenu                                             " Recursive path Tab autocomplete
set hidden                                                        " change buffer without saving
set backspace=indent,eol,start                                    " http://vi.stackexchange.com/a/2163
set splitright splitbelow                                         " Open new splits to the right and bottom
set autoindent smartindent copyindent                             " always set autoindenting on
set smarttab expandtab shiftwidth=4 tabstop=4 softtabstop=4       " Four spaces for tabs everywhere
set hlsearch incsearch ignorecase smartcase                       " Highlight search results, ignore case if search is all lowercase
set nowrap number nomodeline
set laststatus=2
let &colorcolumn=join(range(81,250),",")

" Theming
set background=dark
set termguicolors
let g:one_allow_italics = 1
colorscheme one
autocmd Syntax,InsertEnter * syntax match myFunction /\<\K\k*\ze\s*(/
highlight myTest guifg=#FF0000
highlight link myFunction   Function
highlight Function          cterm=italic gui=italic
highlight Normal            guibg=#262626 guifg=#c9c9c9
highlight ColorColumn       guibg=#222222
highlight ALEErrorSign      guifg=#FF0000
highlight ALEWarningSign    guifg=#FFFF00
highlight ALEWarning        guibg=#333300
highlight SignColumn        guibg=#262626
highlight SignifySignAdd    guifg=#00ff00
highlight SignifySignDelete guifg=#ff0000
highlight SignifySignChange guifg=#ffff00

" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        highlight Function          cterm=italic gui=italic
        highlight Normal            guibg=#262626 guifg=#c9c9c9
        highlight ColorColumn       guibg=#222222
        highlight ALEErrorSign      guifg=#FF0000
        highlight ALEWarningSign    guifg=#FFFF00
        highlight ALEWarning        guibg=#333300
        highlight SignColumn        guibg=#262626
        highlight SignifySignAdd    guifg=#00ff00
        highlight SignifySignDelete guifg=#ff0000
        highlight SignifySignChange guifg=#ffff00
    else
        set background=light
        highlight Function          cterm=italic gui=italic
        highlight Normal            guibg=#ffffff
        highlight ColorColumn       guibg=#f0f0f0
        highlight ALEWarning        guibg=#e4e4e4
        highlight ALEErrorSign      guibg=#555555 guifg=#FF0000
        highlight ALEWarningSign    guibg=#555555 guifg=#FFFF00
        highlight SignColumn        guibg=#e4e4e4
        highlight SignifySignAdd    guifg=#00ff00 guibg=#555555
        highlight SignifySignDelete guifg=#ff0000 guibg=#555555
        highlight SignifySignChange guifg=#ffff00 guibg=#555555
    endif
endfunction
