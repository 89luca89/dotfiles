filetype off                  " required
call plug#begin('~/.vim/plugged')
" utilities
Plug 'ap/vim-buftabline'
Plug 'mhinz/vim-signify'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf'                                             " fuzzy find all the things
Plug 'junegunn/fzf.vim'                                         " fuzzy find all the things
" Lang Packs
Plug 'sheerun/vim-polyglot'                                     " Lang packs

" ALE
Plug 'dense-analysis/ale'
" Deoplete
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'prabirshrestha/asyncomplete-tags.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'yami-beta/asyncomplete-omni.vim'
Plug 'wellle/tmux-complete.vim'                                 " Complete from text on other splits

" Theme
Plug 'flazz/vim-colorschemes'

call plug#end()                                                 " required
filetype plugin indent on                                       " required
"autocmd VimResized * :wincmd =

" Langs
let g:python_highlight_all=1
let g:ansible_yamlKeyName = 'yamlKey'
let g:ansible_attribute_highlight = 'ab'
let g:ansible_name_highlight = 'd'
let g:ansible_extra_keywords_highlight = 1
let g:ansible_normal_keywords_highlight = 'Define'
let g:ansible_with_keywords_highlight = 'Operator'

" ALE linter
set omnifunc=ale#completion#OmniFunc
let g:ale_enabled = 1
let g:ale_set_quickfix = 1
let g:ale_linters_explicit = 1
let g:ale_set_highlights = 0
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
let g:ale_fixers = {
            \ '*':['remove_trailing_lines', 'trim_whitespace'],
            \ 'sh':['shfmt'],
            \ 'xml':['xmllint'],
            \ 'python':['autopep8','isort']
            \}
let g:ale_linters = {
            \ 'asm': ['clangd', 'gcc'],
            \ 'c': ['clangd', 'gcc'],
            \ 'cpp': ['clangd', 'gcc'],
            \ 'sh':['shellcheck', 'shell'],
            \ 'python': ['pyls', 'python','pylint'],
            \ 'xml':['xmllint'],
            \ 'json':['jsonlint'],
            \ 'yaml':['yamllint'],
            \ 'ansible':['ansible-lint']
            \}

let $FZF_DEFAULT_COMMAND="rg --files --hidden"
let g:fzf_files_options = "--preview 'if file {1} | grep -i text; then highlight {1} --force -s molokai -O truecolor ; fi'"
let g:fzf_tags_command = 'ctags -R'
let g:fzf_action = {'alt-enter':'vsplit' }

""" Ctrl-C copy visual selection to clipboard
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>
nnoremap <C-c> :bd<CR>

let mapleader = ' '
" leader y/p to use system clipboard
map <leader>y "+y
map <leader>p "+p
" Utility shortcuts with leader:
map <leader><Tab> :Buffers<CR>
map <leader>t :Tags<CR>
map <leader>b :Files<CR>
map <leader>f :Rg<CR>
map <leader>r :ALEFindReferences<CR>
map <leader>gt :ALEGoToDefinition<CR>
map <leader>tg :ALEGoToTypeDefinition<CR>
map <leader>h :ALEHover<CR>
map <leader>t :ALERename<CR>
map <leader>\ :NERDTreeToggle<CR>
map <leader>e :NERDTreeFind<CR>
map <leader>j :set ft=.jinja2<Left><Left><Left><Left><Left><Left><Left>

" Ctrl+L Format Code
" if not use the specific implementation
noremap <C-L> <Esc>:w<CR>:mkview<CR>gg=G<CR>:loadview<CR>
augroup autoformat_settings
    autocmd FileType c,cpp,java,typescript,javascript noremap <buffer> <C-L><Esc>:w<CR>:mkview<CR>:%!clang-format -style=Google %<CR>:loadview<CR>
    autocmd FileType sh noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:!beautysh -f %<CR>:e<CR>:loadview<CR>
    autocmd FileType json noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!jsonlint -f %<CR>:e<CR>:loadview<CR>
    autocmd FileType python noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!autopep8 %<CR>:w<CR>:!isort %<CR><CR>:e<CR>:loadview<CR>
augroup END
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab> :bn<CR>
map <S-Tab> :bp<CR>
"map <C-c> :bp<bar>sp<bar>bn<bar>bd!<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Up> :2winc+<cr>
noremap <S-M-Down> :2winc-<cr>
noremap <S-M-Left> :2winc<<cr>
noremap <S-M-Right> :2winc><cr>

set updatetime=500
set title nocompatible nowritebackup nobackup                    " required
set mouse=a                                                       " it's always useful
set undofile undolevels=1000 undodir=$HOME/.vim/undo              " Undo file and directory
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set path+=** wildmenu                                             " Recursive path Tab autocomplete
set hidden                                                        " change buffer without saving
set backspace=indent,eol,start                                    " http://vi.stackexchange.com/a/2163
set splitright splitbelow                                         " Open new splits to the right and bottom
set autoindent smartindent copyindent                             " always set autoindenting on
set smarttab expandtab shiftwidth=4 tabstop=4 softtabstop=4       " Four spaces for tabs everywhere
set hlsearch incsearch ignorecase smartcase                       " Highlight search results, ignore case if search is all lowercase
set nowrap number                                                 " play nicely with long lines
set nomodeline                                                    " protect against https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set laststatus=2
let &colorcolumn=join(range(81,999),",")
syntax on
" play nicely with modern graphics
set encoding=utf8
set background=dark
colorscheme codedark
highlight ColorColumn ctermbg=232
highlight Normal ctermbg=233
highlight StatusLine ctermbg=27
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme codedark
        highlight ColorColumn ctermbg=232
        highlight Normal ctermbg=233
        highlight StatusLine ctermbg=27
    else
        set background=light
        colorscheme github
        highlight ColorColumn ctermbg=255
        highlight Normal ctermbg=white
        highlight StatusLine ctermbg=27 ctermfg=255
    endif
endfunction

" Register completion files
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
" Register completion tags
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
    \ 'name': 'tags',
    \ 'whitelist': ['*'],
    \ 'blacklist': ['c','cpp','python'],
    \ 'completor': function('asyncomplete#sources#tags#completor')
    \ }))
" Register completion buffer
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#buffer#completor')
    \ }))
call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
    \ 'name': 'omni',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#omni#completor')
    \ }))
