set nocompatible              " required
set mouse=a                   " it's always useful to use the mouse then needed
filetype off                  " required

call plug#begin('~/.nvim/plugged')
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'vim-airline/vim-airline'                                  " tabs and statusline
Plug 'scrooloose/nerdtree'                                      " split file manager
Plug 'airblade/vim-gitgutter'                                   " +,-,~ on modified lines in git repo
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.local/bin/fzf', 'do': './install --all' }

" Deoplete
Plug 'Shougo/deoplete.nvim'
" snippets
Plug 'sirver/ultisnips' 
Plug 'honza/vim-snippets'
" Vim LanguageClient setup
Plug 'sheerun/vim-polyglot'
Plug 'autozimu/languageclient-neovim', {
            \ 'branch': 'next',
            \ 'do': 'bash install.sh',
            \ }

" color schemes
Plug 'tomasiser/vim-code-dark'
Plug 'endel/vim-github-colorscheme'

call plug#end()               " required
filetype plugin indent on     " required

""" Git signs in gutter
set grepprg=rg
let g:gitgutter_grep = 'rg'
let g:fzf_tags_command = 'ctags -R'

" Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#auto_completion_start_length = 2
let g:deoplete#manual_completion_start_length = 1
" Async Complete + LSP
let g:LanguageClient_autoStart = 1
let g:LanguageClient_diagnosticsEnable = 1
let g:LanguageClient_diagnosticsList = "Location"
let g:LanguageClient_hasSnippetSupport = 1
let g:LanguageClient_loadSettings = 1
let g:LanguageClient_serverCommands = {
            \ 'c': ['clangd'],
            \ 'cpp': ['clangd'],
            \ 'python': ['/usr/local/bin/pyls'],
            \ 'sh' : ['~/.npm-packages/bin/bash-language-server', 'start'],
            \ 'yaml': ['~/.npm-packages/bin/yaml-language-server', '--stdio'],
            \ 'yaml.ansible': ['~/.npm-packages/bin/yaml-language-server', '--stdio'],
            \ 'xml': ['~/bin/xmlls'],
            \ 'java': ['~/bin/jdtls', '-data', "./workspace" ],
            \ }
            "\ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
            "\ 'go' : ['~/.local/go/bin/go-langserver'],
function! s:setYamlSchema()
    echom &ft
    if &ft == "yaml.ansible"
        echom "Yaml-Language-Server using ansible schema."
        let config = json_decode(system("cat ~/dotfiles/yaml/ansible.json"))
        call LanguageClient#Notify('workspace/didChangeConfiguration', { 'settings': config })
    elseif &ft=="yaml"
        echom "Yaml-Language-Server using default schema."
        let config = json_decode(system("cat ~/dotfiles/yaml/default.json"))
        call LanguageClient#Notify('workspace/didChangeConfiguration', { 'settings': config })
    endif
endfunction

augroup LanguageClient_config
    autocmd!
    autocmd User LanguageClientStarted call s:setYamlSchema()
augroup END

""" Airline -> bufferline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'

" I Like snippets!
let g:UltiSnipsListSnippets="<c-h>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Launch fix-netbeans-project to update jar libs and restart the lang server
map <silent> <leader>u :LanguageClientStop<cr>:LanguageClientStart<cr>
" Language client shortcuts with leader:
map <silent> <leader>m :call LanguageClient_contextMenu()<cr>
map <silent> <leader>r :call LanguageClient_textDocument_rename()<cr>
map <silent> <leader>] :call LanguageClient#textDocument_definition()<cr>
map <silent> <leader>[ :call LanguageClient_textDocument_implementation()<cr>
map <silent> <leader>p :call LanguageClient#textDocument_references()<cr>
" Ctrl+L Format Code
" default on lang server
" if not use the specific implementation
noremap <C-L> :call LanguageClient#textDocument_formatting()<cr>
noremap <C-L> <Esc>:w<CR>:mkview<CR>ggVG=<CR>:loadview<CR>
augroup autoformat_settings
    autocmd FileType python noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!autopep8 %<CR>:loadview<CR>
    autocmd FileType c,cpp,objc,proto,typescript,javascript,java noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!clang-format -style=file %<CR>:loadview<CR>
    autocmd FileType html,css,json noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!jsonlint -f %<CR>:loadview<CR>
    autocmd FileType sh noremap <buffer> <C-L> <Esc>:w<CR>:mkview<CR>:%!shfmt %<CR>:loadview<CR>
augroup END

map <silent> <C-F> :<C-u>call ToggleErrors()<CR>
function! ToggleErrors()
    if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
        lopen
    else
        lclose
    endif
endfunction

" Ctrl+T fuzzy find ctags
" Ctrl+P fuzzy find files
" Ctrl+G grep -r in the folder
noremap <C-T> :Tags<CR>
noremap <C-P> :FZF<CR>
noremap <C-G> :Rg<CR>

" Ctrl+N relocate file explorer to opened file
let NERDTreeShowHidden=1
noremap <C-\> :NERDTreeToggle<CR>
noremap <C-N> :NERDTreeFind<CR>

" Double tap ESC or ESC+Timeout to exit tmode
" Ctrl+a+v new terminal split vertical
" Ctrl+a+s new terminal split orizontal
tnoremap <Esc><Esc>  <C-\><C-n>
nnoremap <C-a>s :split<bar>:te<CR>
nnoremap <C-a>v :vs<bar>:te<CR>

map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme codedark
    else
        set background=light
        colorscheme github
    endif
endfunction

autocmd VimResized * :wincmd =                          " Resize Split When the window is resized"

""" Tabs Navigation
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab> :bn<CR>
map <S-Tab> :bp<CR>
" Ctrl+C close buffer ( pipe commands to fix behaviour with splits and netrw/nerdtree)
nnoremap <C-c> :bp<bar>sp<bar>bn<bar>bd!<CR>
""" leader+y/p copy/paste selection to clipboard
noremap <leader>y "+y
noremap <leader>p "+p
" " Resize split window horizontally and vertically
" Shortcuts to Shift-Alt-Arrows - Alt is mapped as M in vim
noremap <S-M-Up> :2winc+<cr>
noremap <S-M-Down> :2winc-<cr>
noremap <S-M-Left> :2winc><cr>
noremap <S-M-Right> :2winc<<cr>
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
"nnoremap <silent> <M-\> :TmuxNavigatePrevious<cr>
" Remap Wq to wq to have less typo on exit
cmap Wq wq
set undofile                                            " Undo file and directory
set undolevels=1000
set undodir=$HOME/.nvim/undo
set directory=$HOME/.nvim/swap                          " Custom swapfile directory
set path+=**                                            " Recursive path Tab autocomplete
set wildmenu
set lazyredraw ttyfast ttimeoutlen=20                   " Faster redraw
set hidden                                              " change buffer without saving
set backspace=indent,eol,start                          " http://vi.stackexchange.com/a/2163
set splitright splitbelow                               " Open new splits to the right and bottom
set autoindent smartindent                              " always set autoindenting on
set expandtab shiftwidth=4 tabstop=4 softtabstop=4      " Four spaces for tabs everywhere
set hlsearch incsearch ignorecase smartcase             " Highlight search results, ignore case if search is all lowercase
set nowrap                                              " play nicely with long lines
set number                                              " Enable line numbers
set noshowcmd
set nomodeline                                          " protect against https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set cursorline                                          " locate the line
set signcolumn=yes
let &colorcolumn=join(range(81,999),",")
syntax on

" play nicely with modern graphics
set encoding=utf8
set background=dark
set termguicolors
colorscheme codedark
highlight ColorColumn ctermbg=235
