" Miscellaneous
let g:python_host_prog  = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'
set updatetime=300
set colorcolumn=80
set title nocompatible nowritebackup nobackup                     " required
set mouse=a undofile undolevels=1000 undodir=$HOME/.vim/undo      " Undo file and directory
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set path+=** wildmenu                                             " Recursive path Tab autocomplete
set hidden backspace=indent,eol,start                             " http://vi.stackexchange.com/a/2163
set splitright splitbelow                                         " Open new splits to the right and bottom
set autoindent smartindent copyindent smarttab expandtab shiftwidth=4 tabstop=4 softtabstop=4
set hlsearch incsearch ignorecase smartcase                       " Highlight search results, ignore case if search is all lowercase
set nowrap number nomodeline ttyfast lazyredraw
set completeopt=noinsert,noselect,menu,popup
set completepopup=align:menu,border:off,highlight:Pmenu
filetype off
call plug#begin('~/.vim/plugged')
" utilities
Plug 'ap/vim-buftabline'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.local/bin/fzf', 'do': './install --all' }
" Git
Plug 'mhinz/vim-signify'
" Lang Packs
Plug 'sheerun/vim-polyglot', { 'do': './build' }
" Aestetics
Plug 'acarapetis/vim-colors-github'
Plug 'tomasiser/vim-code-dark'
" LSP + ALE
Plug 'autozimu/languageclient-neovim', { 'branch': 'next', 'do': 'bash install.sh', }
Plug 'dense-analysis/ale'
" Deoplete + Dependencies
Plug 'shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
call plug#end()
filetype plugin indent on
syntax on
" Dynamic split resize
autocmd VimResized * :wincmd =
" tabline
let g:buftabline_indicators = 1
let g:buftabline_plug_max   = 0
let g:buftabline_separators = 1
" Git
let g:signify_sign_add               = '>'
let g:signify_sign_change            = '~'
let g:signify_sign_delete            = '<'
" Langs
let g:ansible_attribute_highlight       = 'ab'
let g:ansible_extra_keywords_highlight  = 1
let g:ansible_name_highlight            = 'd'
let g:ansible_normal_keywords_highlight = 'Define'
let g:ansible_yamlKeyName               = 'yamlKey'
let g:go_highlight_array_whitespace_error   = 1
let g:go_highlight_build_constraints        = 1
let g:go_highlight_chan_whitespace_error    = 1
let g:go_highlight_extra_types      = 1
let g:go_highlight_fields           = 1
let g:go_highlight_function_calls   = 1
let g:go_highlight_function_parameters  = 1
let g:go_highlight_functions            = 1
let g:go_highlight_generate_tags        = 1
let g:go_highlight_operators            = 1
let g:go_highlight_space_tab_error      = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_types                    = 1
let g:go_highlight_variable_assignments     = 1
let g:go_highlight_variable_declarations    = 1
let g:java_highlight_all    = 1
let g:python_highlight_all  = 1
let g:python_highlight_builtin_funcs        = 1
let g:python_highlight_builtin_funcs_kwarg  = 1
let g:python_highlight_builtin_objs     = 1
let g:python_highlight_builtin_types    = 1
let g:python_highlight_builtins     = 1
let g:python_highlight_class_vars   = 1
let g:python_highlight_doctests     = 1
let g:python_highlight_exceptions   = 1
let g:python_highlight_file_headers_as_comments = 1
let g:python_highlight_func_calls       = 1
let g:python_highlight_indent_errors    = 1
let g:python_highlight_operators        = 1
let g:python_highlight_space_errors     = 1
let g:python_highlight_string_format    = 1
let g:python_highlight_string_formatting= 1
let g:python_highlight_string_templates = 1
" FZF fuzzy
let g:fzf_action = {'alt-enter':'vsplit' }
let g:fzf_files_options = "--preview 'if file {1} | grep -Ei \"text|JSON\"; then cat {1} ; fi'"
"""     Shortcuts   "
" do last action on a selection
vnoremap . :'<,'>:normal .<CR>
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab>   :<C-u>bn<CR>
map <S-Tab> :<C-u>bp<CR>
" C-c close buffer
nnoremap <C-c> :<C-u>bp<BAR>sp<BAR>bn<BAR>bd<CR>
" Leader map
let mapleader = ' '
" leader y/p to use system clipboard, C-c in vmode for xclip
map <leader>y "+y
map <leader>p "+p
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>
" " Resize split window horizontally and vertically
noremap <S-M-Down>  :<C-u>2winc-<CR>
noremap <S-M-Left>  :<C-u>2winc<<CR>
noremap <S-M-Right> :<C-u>2winc><CR>
noremap <S-M-Up>    :<C-u>2winc+<CR>
" Utility shortcuts with leader:
nnoremap <leader><Tab>  :<C-u>Buffers<CR>
nnoremap <leader>b      :<C-u>Files<CR>
nnoremap <leader>f      :<C-u>Rg<CR>
nnoremap <leader>t      :<C-u>Tags<CR>
" Utility for Markdown and Ansible
nnoremap <leader>j  :<C-u>set ft=
" Theming
set noshowmode noshowcmd laststatus=0 ruler   " hide statusline
set rulerformat=%20(%m%r%w\ %y\ %l/%c%)\        " Modified+FileType+Ruler
set fillchars+=vert:│
set guioptions=d
set background=dark
set termguicolors
augroup customsyntax
    autocmd! customsyntax
    autocmd Syntax,InsertEnter * syntax match myFunction /\<\k\+\ze(/
    autocmd Syntax,InsertEnter * syntax match myDeclaration_1 /\<\k\+\ze\s*=[a-zA-Z0-9 $:.\/\\]/
    " Remove trailing whitespaces and lines
    autocmd BufWritePre * silent! :call StripTrailingWhiteSpace()
    " Refresh tags on save
    autocmd BufWritePost * silent! :call GenTags()
augroup end
highlight link myFunction       Function
highlight link myDeclaration_1  Identifier
colorscheme codedark
highlight Normal        guibg=#131313
highlight TabLine       guibg=#2E1E1E guifg=#D3D7CF
highlight TabLineFill   guibg=#1E1E1E guifg=#D3D7CF
highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
" FUNCTIONS --------------------------------------------------------------------
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme codedark
        highlight Normal        guibg=#131313
        highlight TabLine       guibg=#1E1E1E guifg=#D3D7CF
        highlight TabLineFill   guibg=#1E1E1E guifg=#D3D7CF
        highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
    else
        set background=light
        colorscheme github
        highlight ColorColumn   guibg=#F5F5F5
        highlight Normal        guibg=#FFFFFF
        highlight Pmenu         guifg=#000000 guibg=#EEEEEE
        highlight SpecialKey    guibg=#FFFFFF guifg=#9a9a9a
        highlight TabLineSel    guifg=#262626 guibg=#8a8a8a
    endif
endfunction
" Generate tags
function! GenTags()
    if isdirectory(".git") || filereadable(".project")
        silent exec "!rm -f ./tags; ctags -R ."
        redraw!
    endif
endfun
" Remove Trailing Spaces and empty lines
function! StripTrailingWhiteSpace()
    " don't strip on these filetypes
    if &ft =~ 'markdown'
        return
    endif
    %s/\s\+$//e
    %s/\($\n\s*\)\+\%$//e
    redraw!
endfun
" LSP SETUP --------------------------------------------------------------------
" Default IDE-Style keybindings EDMRL, errors, definition, references, rename, indent
nnoremap <leader>e  :<C-u>copen<CR>
nnoremap <leader>d  :<C-u>vert stag <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>l  :<C-u>mkview<CR>ggVG=:<C-u>loadview<CR>
nnoremap <leader>m  :<C-u>Rg <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>r  :<C-u>!grep -rl <c-r>=expand("<cword>")<CR><BAR>xargs sed -i 's/<c-r>=expand("<cword>")<CR>//g'<Left><Left><Left>
" Lsp keybindings overriding the previous
augroup lspbindings
    autocmd! lspbindings
    " IDE-like keybindings
    autocmd Filetype c,cpp,objc,objcpp,python,go,yaml.yaml.ansible,sh nnoremap <buffer> <leader>A  :<C-u>bufdo ALELint<CR><CR>:so ~/.vimrc<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> K  :<C-u>call LanguageClient#textDocument_hover()<CR>
    " Default IDE-Style keybindings EDMRL, errors, definition, references, rename, indent
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>h :<C-u>call LanguageClient_contextMenu()<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>d :<C-u>call LanguageClient#textDocument_definition({'gotoCmd': 'split'})<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>l :<C-u>call LanguageClient#textDocument_formatting()<CR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>m :<C-u>call LanguageClient#textDocument_references()<aCR>
    autocmd Filetype c,cpp,objc,objcpp,python,go nnoremap <buffer> <leader>r :<C-u>call LanguageClient#textDocument_rename()<CR>
augroup end
" Async enable ALE and Deoplete for better performances
autocmd InsertEnter * call deoplete#enable()
let g:deoplete#enable_at_startup = 0                " Start on insert mode
" ALE linter
let g:ale_enabled           = 1
let g:ale_set_quickfix      = 1
let g:ale_linters_explicit  = 1
let g:ale_sign_error        = '⤫'
let g:ale_sign_warning      = '▲'
let g:ale_yaml_yamllint_options = '-d relaxed'
let g:ale_linters = {
            \ 'sh':['shellcheck'],
            \ 'ansible':['ansible-lint'],
            \ 'yaml':['yamllint'],
            \ 'go':['golangci-lint'],
            \ 'python':['pylint'],
            \}
" LSP Language Client
let g:LanguageClient_autoStart  = 1
let g:LanguageClient_diagnosticsEnable  = 1
let g:LanguageClient_diagnosticsList = "Quickfix"
let g:LanguageClient_serverCommands     = {
            \ 'c': ['clangd'],
            \ 'cpp': ['clangd'],
            \ 'objc': ['clangd'],
            \ 'objcpp': ['clangd'],
            \ 'go': ['gopls'],
            \ 'python': ['pyls'],
            \}
