filetype off                  " required
call plug#begin('~/.vim/plugged')
" vim tmux navigator
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'vim-airline/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf'                                             " fuzzy find all the things
Plug 'junegunn/fzf.vim'                                         " fuzzy find all the things
" LSP + completion
Plug 'w0rp/ale'                                                 " ALE For langs not supported by LSP
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
" Snippets
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
" Colorschemes
Plug 'sheerun/vim-polyglot'                                     " Lang packs
Plug 'flazz/vim-colorschemes'
call plug#end()                                                 " required
filetype plugin indent on                                       " required

autocmd VimResized * :wincmd =
let g:java_highlight_all=1
let g:java_highlight_java_lang_ids=1
let g:ansible_yamlKeyName = 'yamlKey'
let g:ansible_attribute_highlight = 'ab'
let g:ansible_name_highlight = 'd'
let g:ansible_extra_keywords_highlight = 1
let g:ansible_normal_keywords_highlight = 'Define'
let g:ansible_with_keywords_highlight = 'Operator'
""" Airline -> bufferline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
" GitGutter Ripgrep
let g:gitgutter_grep_command = 'rg --hidden --follow --glob "!.git/*"'
let g:coc_global_extensions = [ 'coc-json', 'coc-xml', 'coc-go', 'coc-python', 'coc-java', 'coc-rls', 'coc-ultisnips' ]
" ALE Linters (for non-lsp langs)
let g:ale_set_quickfix = 1
let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1
let g:ale_fixers = {'*':['remove_trailing_lines', 'trim_whitespace']}
let g:ale_linters = {
            \ 'sh':['shellcheck', 'checkbashisms'],
            \ 'yaml':['yamllint'],
            \ 'ansible':['ansible-lint'],
            \ 'java':['checkstyle']
            \}
let $FZF_DEFAULT_COMMAND="rg --files --hidden"
let g:fzf_files_options = "--preview 'if file {1} | grep -i text; then highlight {1} --force -s molokai -O truecolor ; fi'"
let g:fzf_tags_command = 'ctags -R'
let g:fzf_action = {'alt-enter':'vsplit' }
let mapleader = ' '
" leader y/p to use system clipboard
map <Leader>y "+y
map <Leader>p "+p
" Utility shortcuts with leader:
map <leader>/ :nohlsearch<CR>
map <leader>t :Tags<CR>
map <leader>b :Files<CR>
map <leader>f :Rg<CR>
map <leader>e :CocList --normal diagnostics<CR>
map <leader><leader>b :CocList --normal buffers<CR>
" Language client shortcuts with leader:
map <leader>m :CocList actions<cr>
map <leader>F :CocFix<cr>
map <leader>h :call CocAction('doHover')<cr>
map <leader>r :call CocAction('rename')<cr>
map <leader>] :call CocAction('jumpDefinition')<cr>
map <leader>[ :call CocAction('jumpImplementation')<cr>
map <leader>r :call CocAction('jumpReferences')<cr>
map <leader>l :call CocAction('format')<cr>
" leader+n or \ relocate file explorer to opened file
let NERDTreeShowHidden=1
map <leader>\ :NERDTreeToggle<CR>
map <leader>n :NERDTreeFind<CR>
" Ctrl+L Format Code
" if not use the specific implementation
noremap <C-L> <Esc>:w<CR>:mkview<CR>gg=G<CR>:loadview<CR>
augroup autoformat_settings
    autocmd FileType typescript,javascript noremap <buffer> <C-L><Esc>:w<CR>:mkview<CR>:%!clang-format -style=Google %<CR>:loadview<CR>
    autocmd FileType sh noremap <buffer> <C-L> <Esc>:w<CR>:!beautysh -f %<CR>:e<CR>
    autocmd FileType c,cpp,java,json,xml,go,rust,python noremap <buffer> <C-L> :call CocAction('format')<CR>
augroup END
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab> :bn<CR>
map <S-Tab> :bp<CR>
" Ctrl+C close buffer ( pipe commands to fix behaviour with splits and netrw/nerdtree)
map <C-c> :bp<bar>sp<bar>bn<bar>bd!<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Up> :2winc+<cr>
noremap <S-M-Down> :2winc-<cr>
noremap <S-M-Left> :2winc><cr>
noremap <S-M-Right> :2winc<<cr>
" vim-tmux-navigator shortcuts
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
inoremap <silent> <M-Left> <Esc>:TmuxNavigateLeft<cr>
inoremap <silent> <M-Down> <Esc>:TmuxNavigateDown<cr>
inoremap <silent> <M-Up> <Esc>:TmuxNavigateUp<cr>
inoremap <silent> <M-Right> <Esc>:TmuxNavigateRight<cr>
" Remap Wq to wq to have less typo on exit
cmap Wq wq
set title nocompatible nowritebackup nobackup                    " required
set mouse=a                                                       " it's always useful
set undofile undolevels=1000 undodir=$HOME/.vim/undo              " Undo file and directory
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set path+=** wildmenu                                             " Recursive path Tab autocomplete
set wildmenu
set lazyredraw ttyfast ttimeoutlen=20                             " Faster redraw
set hidden                                                        " change buffer without saving
set backspace=indent,eol,start                                    " http://vi.stackexchange.com/a/2163
set splitright splitbelow                                         " Open new splits to the right and bottom
set autoindent smartindent copyindent                             " always set autoindenting on
set smarttab expandtab shiftwidth=4 tabstop=4 softtabstop=4       " Four spaces for tabs everywhere
set hlsearch incsearch ignorecase smartcase                       " Highlight search results, ignore case if search is all lowercase
set nowrap number                                                 " play nicely with long lines
set nomodeline                                                    " protect against https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
set signcolumn=yes laststatus=2
let &colorcolumn=join(range(81,999),",")
syntax on
" play nicely with modern graphics
set encoding=utf8
set background=dark
set termguicolors
colorscheme molokai
hi StatusLineNC guifg=#151515 guibg=#888888
hi StatusLine guifg=#555555 guibg=#151515
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme molokai
        hi StatusLineNC guifg=#151515 guibg=#888888
        hi StatusLine guifg=#555555 guibg=#151515
    else
        set background=light
        colorscheme eclipse
        hi ColorColumn guibg=#eeeeee
        hi VertSplit guibg=#eeeeee guifg=#aaaaaa
        hi Pmenu guibg=#aaaaaa
    endif
endfunction
