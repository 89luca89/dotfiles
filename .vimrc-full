filetype off
call plug#begin('~/.vim/plugged')
" vim tmux navigator
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'junegunn/fzf', { 'dir': '~/.local/bin/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ap/vim-buftabline'
" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
"" Lang Packs
Plug 'sheerun/vim-polyglot', { 'do': './build' }
"" CTags (for non-lsp langs)
Plug 'ludovicchabant/vim-gutentags'
" vim-lsp + asyncomplete
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'prabirshrestha/asyncomplete-tags.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
" Aestetics
Plug 'tomasiser/vim-code-dark'
Plug 'acarapetis/vim-colors-github'
call plug#end()
"
filetype plugin indent on
syntax on
" Dynamic split resize
autocmd VimResized * :wincmd =
" Remove trailing whitespaces and lines
autocmd BufWritePre * silent! :call StripTrailingWhiteSpace()
" Set cursorline ONLY on active buffer
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END
" tabline
let g:buftabline_indicators = 1
let g:buftabline_separators = 1
let g:buftabline_plug_max   = 0
" Tags
let g:gutentags_project_root = ['Makefile', '.project', '.git', '.hg', '.svn',
            \           '.bzr', '_darcs', '_darcs', '_FOSSIL_', '.fslckout' ]
let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')
let g:gutentags_generate_on_new     = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write   = 1
let g:gutentags_generate_on_empty_buffer = 0
"
let g:python_host_prog  = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'
" Netrw
let g:netrw_banner          = 0
let g:netrw_browse_split    = 4
let g:netrw_liststyle       = 3
let g:netrw_winsize         = -28
" Langs
let g:ansible_attribute_highlight   = 'ab'
let g:ansible_extra_keywords_highlight  = 1
let g:ansible_name_highlight = 'd'
let g:ansible_normal_keywords_highlight = 'Define'
let g:ansible_yamlKeyName   = 'yamlKey'
let g:go_highlight_build_constraints    = 1
let g:go_highlight_extra_types  = 1
let g:go_highlight_fields       = 1
let g:go_highlight_functions    = 1
let g:go_highlight_methods      = 1
let g:go_highlight_operators    = 1
let g:go_highlight_structs      = 1
let g:go_highlight_types        = 1
let g:python_highlight_all  = 1
" Asyncomplete + LSP
set completeopt=noinsert,noselect,menu,popup
set completepopup=align:menu,border:off,highlight:Pmenu
let g:asyncomplete_auto_completeopt  = 0
let g:asyncomplete_remove_duplicates = 1
let g:asyncomplete_smart_completion  = 1
let g:lsp_auto_enable   = 1
let g:lsp_diagnostics_echo_cursor    = 1
let g:lsp_diagnostics_enabled        = 1
let g:lsp_highlight_references_enabled = 1
let g:lsp_highlights_enabled         = 1
let g:lsp_log_file  = expand('/dev/null')
let g:lsp_log_verbose          = 0
let g:lsp_preview_max_width    = 100
let g:lsp_semantic_enabled     = 1
let g:lsp_signs_enabled        = 1
let g:lsp_virtual_text_enabled = 1
call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
            \ 'name': 'buffer',
            \ 'whitelist': ['*'],
            \ 'completor': function('asyncomplete#sources#buffer#completor'),
            \ }))
call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
            \ 'name': 'file',
            \ 'whitelist': ['*'],
            \ 'completor': function('asyncomplete#sources#file#completor')
            \ }))
call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
            \ 'name': 'tags',
            \ 'whitelist': ['*'],
            \ 'blacklist': [
            \        'c',
            \        'cpp',
            \        'go',
            \        'python'],
            \ 'completor': function('asyncomplete#sources#tags#completor'),
            \ }))
call lsp#register_server({
            \ 'name': 'efm-langserver',
            \ 'whitelist': [
            \       'yaml',
            \       'yaml.ansible',
            \       'sh',
            \       'python',
            \       'go'
            \ ],
            \ 'cmd': {server_info->['efm-langserver',
            \       '-c=/home/luca-linux/dotfiles/efm-config.yml',
            \       '-logfile=/tmp/lsp.log', '-loglevel=5']},
            \ })
call lsp#register_server({
            \ 'name': 'clangd',
            \ 'whitelist': ['c', 'cpp'],
            \ 'cmd': {server_info->['clangd', '-background-index']},
            \ })
call lsp#register_server({
            \ 'name': 'gopls',
            \ 'whitelist': ['go'],
            \ 'cmd': {server_info->['gopls']},
            \ 'workspace_config': {
            \  'gopls' : {
            \       'usePlaceholders' : v:true,
            \       'staticcheck': v:true,
            \       "deepCompletion": v:true,
            \       "completeUnimported": v:true
            \     }
            \ },
            \ })
call lsp#register_server({
            \ 'name': 'pyls',
            \ 'whitelist': ['python'],
            \ 'cmd': {server_info->['pyls']},
            \ 'workspace_config': {
            \   'pyls' : {
            \      'plugins': {
            \         'pydocstyle': {
            \            'enabled': v:true
            \            }
            \        }
            \    }
            \ },
            \ })
"
"    'workspace_config': {},
" FZF fuzzy
let g:fzf_action = {'alt-enter':'vsplit' }
let g:fzf_files_options = "--preview 'if file {1} | grep -Ei \"text|JSON\"; then cat {1} ; fi'"
"""     Shortcuts   "
" Leader map
let mapleader = ' '
" toggle file explorer
nnoremap <C-n> :Lexplore<CR>
" leader y/p to use system clipboard, C-c in vmode for xclip
map <leader>y "+y
map <leader>p "+p
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>
" vim-tmux-navigator shortcuts
let g:tmux_navigator_no_mappings    = 1
inoremap <silent> <M-Down>  <Esc>:<C-u>TmuxNavigateDown<CR>
inoremap <silent> <M-Left>  <Esc>:<C-u>TmuxNavigateLeft<CR>
inoremap <silent> <M-Right> <Esc>:<C-u>TmuxNavigateRight<CR>
inoremap <silent> <M-Up>    <Esc>:<C-u>TmuxNavigateUp<CR>
nnoremap <silent> <M-Down>  :<C-u>TmuxNavigateDown<CR>
nnoremap <silent> <M-Left>  :<C-u>TmuxNavigateLeft<CR>
nnoremap <silent> <M-Right> :<C-u>TmuxNavigateRight<CR>
nnoremap <silent> <M-Up>    :<C-u>TmuxNavigateUp<CR>
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab>   :<C-u>bn!<CR>
map <S-Tab> :<C-u>bp!<CR>
" C-c close buffer
nnoremap <C-c> :<C-u>bp<BAR>sp<BAR>bn<BAR>bd<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Down>  :<C-u>2winc-<CR>
noremap <S-M-Left>  :<C-u>2winc<<CR>
noremap <S-M-Right> :<C-u>2winc><CR>
noremap <S-M-Up>    :<C-u>2winc+<CR>
" Utility shortcuts with leader:
nnoremap <leader><Tab>  :<C-u>Buffers<CR>
nnoremap <leader>b      :<C-u>Files<CR>
nnoremap <leader>f      :<C-u>Rg<CR>
" Utility for Markdown and Ansible
nnoremap <leader>j  :<C-u>set ft=
" Default IDE-Style keybindings
nnoremap <leader>gd :<C-u>GitGutterPreviewHunk<CR>
nnoremap <leader>gu :<C-u>GitGutterUndoHunk<CR>
nnoremap <leader>gs :<C-u>GFiles?<CR>
nnoremap <leader>gg :<C-u>GitGutterLineHighlightsToggle<CR>
nnoremap <leader>m  :<C-u>Commands<CR>
nnoremap <leader>t  :<C-u>Tags<CR>
nnoremap <leader>x  :<C-u>Rg <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>D  <C-T>
nnoremap <leader>d  :<C-u>vert stag <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>r  :<C-u>!grep -rl <c-r>=expand("<cword>")<CR><BAR>xargs sed -i 's/<c-r>=expand("<cword>")<CR>//g'<Left><Left><Left>
nnoremap <leader>l  :<C-u>mkview<CR>ggVG=:<C-u>loadview<CR>
" nnoremap <leader>e  :<C-u>lopen<CR>
" LSP keybindings overriding the previous
augroup lspbindings
    autocmd! lspbindings
    " Lang specific keybindings
    autocmd Filetype sh nnoremap <buffer> <leader>l :<C-u>mkview<CR>:%!shfmt -f <CR><CR>:loadview<CR>
    " IDE-like keybindings
    autocmd Filetype c,cpp,python,go nnoremap <buffer> K  :<C-u>call popup_clear()<BAR>LspHover<CR>
    autocmd Filetype c,cpp,python,go nnoremap <buffer> <leader>m :<C-u>LspCodeAction<CR>
    autocmd Filetype c,cpp,python,go nnoremap <buffer> <leader>h :<C-u>call popup_clear()<BAR>LspPeekDefinition<CR>
    autocmd Filetype c,cpp,python,go nnoremap <buffer> <leader>td :<C-u>call popup_clear()<BAR>LspPeekTypeDefinition<CR>
    autocmd Filetype c,cpp,python,go nnoremap <buffer> <leader>d :<C-u>LspDefinition<CR>
    autocmd Filetype c,cpp,python,go nnoremap <buffer> <leader>r :<C-u>LspRename<CR>
    autocmd Filetype c,cpp,python,go nnoremap <buffer> <leader>l :<C-u>LspDocumentFormat<CR>
    autocmd Filetype * nnoremap <buffer> <leader>e :<C-u>LspDocumentDiagnostics<CR>
augroup end
" Miscellaneous
let &colorcolumn=join(range(81,250),",")
set autoindent backspace=indent,eol,start
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set expandtab shiftwidth=4 tabstop=4 softtabstop=4                " Four spaces for tabs everywhere
set mouse=a                                                       " it's always useful
set nowrap number nomodeline cursorline relativenumber
set path+=**                                                      " Recursive path Tab autocomplete
set smartindent copyindent                                        " always set autoindenting on
set smarttab incsearch sessionoptions-=options viewoptions-=options
set splitright splitbelow                                         " Open new splits to the right and bottom
set title nocompatible nowritebackup nobackup
set undofile undolevels=1000 undodir=$HOME/.vim/undo              " Undo file and directory
set updatetime=1000 ttyfast lazyredraw t_Co=16
" Theming
set noshowmode noruler noshowcmd laststatus=0 ruler               " hide statusline
set rulerformat=%25(%m%r%w\ %y\ %l/%c%)\                          "Modified+FileType+Ruler
set fillchars+=vert:â”‚
set guioptions=d
set background=dark
set termguicolors
autocmd Syntax,InsertEnter * syntax match myFunction /\<\k\+\ze(/
autocmd Syntax,InsertEnter * syntax match myDeclaration_1 /\<.*\k\+\ze\s*=[a-zA-Z0-9 $:.\/\\]/
autocmd Syntax,InsertEnter * syntax match myDeclaration_2 /\<.*\k\+\ze\s*:=[a-zA-Z0-9 $:.\/\\]/
highlight link myFunction   Function
highlight link myDeclaration_1   Identifier
highlight link myDeclaration_2   Identifier
colorscheme codedark
highlight TabLine guibg=#1E1E1E guifg=#D3D7CF
highlight TabLineFill guibg=#1E1E1E guifg=#D3D7CF
highlight TabLineSel guifg=#262626 guibg=#8a8a8a
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        colorscheme codedark
        highlight TabLine guibg=#1E1E1E guifg=#D3D7CF
        highlight TabLineFill guibg=#1E1E1E guifg=#D3D7CF
        highlight TabLineSel guifg=#262626 guibg=#8a8a8a
    else
        set background=light
        colorscheme github
        highlight ColorColumn guibg=#EFEFEF
        highlight Normal guibg=#FFFFFF
        highlight TabLineSel guifg=#262626 guibg=#8a8a8a
    endif
endfunction
" Remove Trailing Spaces and empty lines
function! StripTrailingWhiteSpace()
  " don't strip on these filetypes
  if &ft =~ 'markdown'
    return
  endif
  %s/\s\+$//e
  %s/\($\n\s*\)\+\%$//e
endfun
