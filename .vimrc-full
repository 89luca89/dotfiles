filetype off                                        " required
call plug#begin('~/.vim/plugged')
" vim tmux navigator
Plug 'christoomey/vim-tmux-navigator'
" utilities
Plug 'junegunn/fzf', { 'dir': '~/.local/bin/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'                             " fuzzy find all the things
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
"" Lang Packs
Plug 'sheerun/vim-polyglot', { 'do': './build' }    " Lang packs
"" CTags +  ALE + LSP
Plug 'ludovicchabant/vim-gutentags'
Plug 'dense-analysis/ale'
Plug 'autozimu/languageclient-neovim', { 'branch': 'next', 'do': 'bash install.sh', }
" Deoplete + Dependencies
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'deoplete-plugins/deoplete-tag'
Plug 'wellle/tmux-complete.vim'
Plug 'shougo/deoplete.nvim'
" Colorscheme
Plug 'rakr/vim-one'

call plug#end()                                     " required
"
filetype plugin indent on                           " required
syntax on
" Dynamic split resize
autocmd VimResized * :wincmd =
" Async enable ALE and Deoplete for better performances
autocmd InsertEnter * call deoplete#enable()
autocmd InsertEnter * :ALEEnable
" Tags
"let g:gutentags_project_root = ['package.json', '.git', 'Makefile', '.project']
let g:gutentags_project_root = ['Makefile', '.project', '.git', '.hg', '.svn', '.bzr', '_darcs', '_darcs', '_FOSSIL_', '.fslckout' ]
let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
"
let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'
" Netrw
let g:netrw_banner          = 0
let g:netrw_browse_split    = 4
let g:netrw_liststyle       = 3
let g:netrw_winsize         = -28
" Deoplete
set completeopt-=preview
let g:deoplete#enable_at_startup = 0                " Start on insert mode
" Airline
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_extensions = ['tabline']
" Langs
let g:ansible_attribute_highlight   = 'ab'
let g:ansible_yamlKeyName   = 'yamlKey'
let g:go_highlight_build_constraints    = 1
let g:go_highlight_extra_types  = 1
let g:go_highlight_fields       = 1
let g:go_highlight_functions    = 1
let g:go_highlight_methods      = 1
let g:go_highlight_operators    = 1
let g:go_highlight_structs      = 1
let g:go_highlight_types        = 1
let g:python_highlight_all  = 1
" ALE linter
let g:ale_enabled           = 0                     " Start on insert mode
let g:ale_set_quickfix      = 1
let g:ale_sign_error        = '⤫'
let g:ale_sign_warning      = '▲'
let g:ale_yaml_yamllint_options     = '-d relaxed'
let g:ale_fixers = {
            \ '*':['remove_trailing_lines', 'trim_whitespace'],
            \ 'sh':['shfmt'],
            \ }
let g:ale_linters = {
            \ 'sh':['shellcheck'],
            \ 'yaml':['yamllint'],
            \ 'ansible':['ansible-lint'],
            \}
" LSP Language Client
let g:LanguageClient_autoStart  = 1
let g:LanguageClient_completionPreferTextEdit   = 1
let g:LanguageClient_diagnosticsEnable  = 1
let g:LanguageClient_serverCommands     = {
            \ 'c': ['clangd'],
            \ 'cpp': ['clangd'],
            \ 'python': ['pyls'],
            \ 'go': ['gopls'],
            \}
" FZF fuzzy
let g:fzf_action = {'alt-enter':'vsplit' }
let g:fzf_files_options = "--preview 'if file {1} | grep -Ei \"text|JSON\"; then cat {1} ; fi'"
"""""""""""""""""""""
"""     Shortcuts   "
" Leader map
let mapleader = ' '
" toggle file explorer
nnoremap <C-n> :Lexplore<CR>
" leader y/p to use system clipboard, C-c in vmode for xclip
map <leader>y "+y
map <leader>p "+p
vnoremap <C-c> :'<,'>w !xclip -sel clip<CR><CR>
" vim-tmux-navigator shortcuts
let g:tmux_navigator_no_mappings = 1
inoremap <silent> <M-Down>  <Esc>:TmuxNavigateDown<cr>
inoremap <silent> <M-Left>  <Esc>:TmuxNavigateLeft<cr>
inoremap <silent> <M-Right> <Esc>:TmuxNavigateRight<cr>
inoremap <silent> <M-Up>    <Esc>:TmuxNavigateUp<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
" navigate tabs Tab (fw) S-Tab (prev)
map <Tab>   :bn!<CR>
map <S-Tab> :bp!<CR>
" C-c close buffer
nnoremap <C-c> :bp<bar>sp<bar>bn<bar>bd<CR>
" " Resize split window horizontally and vertically
noremap <S-M-Down>  :2winc-<cr>
noremap <S-M-Left>  :2winc<<cr>
noremap <S-M-Right> :2winc><cr>
noremap <S-M-Up>    :2winc+<cr>
" Utility shortcuts with leader:
nnoremap <leader><Tab> :Buffers<CR>
nnoremap <leader>b :Files<CR>
nnoremap <leader>f :Rg<CR>
" Utility for Markdown and Ansible
nnoremap <leader>j :set ft=.jinja2<Left><Left><Left><Left><Left><Left><Left>
nnoremap <leader>om :!(mdpdf > /dev/null "%" && mv $(echo "%" <bar> sed 's/md/pdf/g') /tmp/ ) &<CR><CR>
" ALE Keybindings
nnoremap <leader>A  :bufdo ALELint<CR>:bp<CR>:bufdo e<CR>:so ~/.vimrc<CR>
nnoremap <leader>e :copen<CR>
nnoremap <leader>E :<C-u>vert copen<bar>:50wincmd><CR>
" Default IDE-Style keybindings
nnoremap <leader>gd :GitGutterPreviewHunk<CR>
nnoremap <leader>gu :GitGutterUndoHunk<CR>
nnoremap <leader>gs :GFiles?<CR>
nnoremap <leader>gg :GitGutterLineHighlightsToggle<CR>
nnoremap <leader>t  :Tags<CR>
nnoremap <leader>x  :Rg <c-r>=expand("<cword>")<cr><CR>
nnoremap <leader>d  :stag <c-r>=expand("<cword>")<CR><CR>
nnoremap <leader>l  :<C-u>mkview<CR>ggVG=:<C-u>loadview<CR>:ALEFix<CR>
nnoremap <leader>r  :!grep -rl <c-r>=expand("<cword>")<cr><bar>xargs sed -i 's/<c-r>=expand("<cword>")<cr>//g'<Left><Left><Left>
" LSP keybindings overriding the previous
augroup lspbindings
    autocmd! lspbindings
    " auto-hover
    autocmd CursorHold *.c,*.cpp,*.py,*.go silent! call ShowHover()
    autocmd CursorHoldI *.c,*.cpp,*.py,*.go silent! call ShowHover()
    " auto-beautify
    autocmd BufWritePre *.c,*.cpp,*.py,*.go silent! call LanguageClient#textDocument_formatting()
    " IDE-like keybindings
    autocmd Filetype c,cpp,python,go nnoremap <leader>a  :call LanguageClient#workspace_applyEdit()<CR>
    autocmd Filetype c,cpp,python,go nnoremap <leader>c  :call LanguageClient#textDocument_completion()<CR>
    autocmd Filetype c,cpp,python,go nnoremap <leader>h  :call LanguageClient#textDocument_hover()<CR>
    autocmd Filetype c,cpp,python,go nnoremap <leader>m  :call LanguageClient_contextMenu()<CR>
    autocmd Filetype c,cpp,python,go nnoremap <leader>d  :call LanguageClient#textDocument_definition({'gotoCmd': 'split'})<CR>
    autocmd Filetype c,cpp,python,go nnoremap <leader>l  :call LanguageClient#textDocument_formatting()<CR>
    autocmd Filetype c,cpp,python,go nnoremap <leader>r  :call LanguageClient#textDocument_rename()<CR>
augroup end
" when stopping on something, show hover
function! ShowHover()
    call popup_clear()
    call LanguageClient#textDocument_hover()
endfunction
" Miscellaneous
set directory=$HOME/.vim/swap                                     " Custom swapfile directory
set expandtab shiftwidth=4 tabstop=4 softtabstop=4       " Four spaces for tabs everywhere
set mouse=a                                                       " it's always useful
set nowrap number nomodeline " cursorline
set path+=**                                             " Recursive path Tab autocomplete
set smartindent copyindent                             " always set autoindenting on
set splitright splitbelow                                         " Open new splits to the right and bottom
set title nocompatible nowritebackup nobackup                     " required
set undofile undolevels=1000 undodir=$HOME/.vim/undo              " Undo file and directory
set updatetime=1000 ttyfast lazyredraw t_Co=16
set showfulltag
set autoindent  backspace=indent,eol,start formatoptions+=j
set smarttab incsearch sessionoptions-=options viewoptions-=options
let &colorcolumn=join(range(81,250),",")
"""""""""
" Theming
set background=dark
set termguicolors
let g:one_allow_italics = 1
colorscheme one
autocmd Syntax,InsertEnter * syntax match myFunction /\<\k\+\ze(/
highlight myTest guifg=#FF0000
highlight link myFunction   Function
highlight ALEErrorSign      guifg=#FF0000
highlight ALEWarning        guibg=#333300
highlight ALEWarningSign    guifg=#FFFF00
" Toggle Theme
map <silent> <C-e> :<C-u>call ToggleTheme()<CR>
function! ToggleTheme()
    if &background == 'light'
        set background=dark
        highlight ALEErrorSign      guifg=#FF0000
        highlight ALEWarning        guibg=#333300
        highlight ALEWarningSign    guifg=#FFFF00
    else
        set background=light
        highlight ALEErrorSign      guibg=#555555 guifg=#FF0000
        highlight ALEWarning        guibg=#e4e4e4
        highlight ALEWarningSign    guibg=#555555 guifg=#FFFF00
    endif
endfunction
